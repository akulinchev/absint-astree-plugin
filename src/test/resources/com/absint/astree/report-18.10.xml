<?xml version="1.0" encoding="UTF-8"?>
<a3c xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.absint.com/dtd/a3-c-report-18.10.xsd" xmlns="http://www.absint.com/a3creport">
    <versions>
        <client_version version="18.10" build="3429976" tag="auto/2018/10/05/1244"/>
        <server_version version="18.10" build="3429976" tag="auto/2018/10/05/1244"/>
        <analyzer_version version="18.10" build="3429976" tag="auto/2018/10/05/1244"/>
        <rules_cxx_version version="18.10" build="3429976" tag="auto/2018/10/05/1244"/>
    </versions>
    <server hostname="127.0.0.1" port="33869" working_directory="/tmp/a3c-UsXeGc/server/1902796016/1/"/>
    <project name="Example: Scenarios" description="n/A" id="1902796016" revision="1"/>
    <analysis type="Astree">
        <analysis_start>2024/09/19 at 11:37:06</analysis_start>
        <analysis_end>2024/09/19 at 11:37:09</analysis_end>
        <summary errors="2" runtime_errors="8" flow_anomalies="1" data_races="0" rule_violations="23" reached_code="98%" reached_code_plain_value="98" duration="3" exit_code="success"/>
        <abi>
            <abi_option name="default"> Analyzer default</abi_option>
        </abi>
        <options>
            <option name="analysis-entry">main</option>
            <option name="config-file">preprocessed/src/astree.cfg</option>
            <option name="export-invariant">stat</option>
            <option name="metrics">yes</option>
        </options>
        <rulechecks>
            <configuration name="Configuration">
                <files>
                    <all_files/>
                </files>
                <rules>
                    <rule name="M2012.D.4.12" partial="1">
                        <check name="stdlib-use-alloc"/>
                    </rule>
                    <rule name="M2012.D.4.11" partial="1">
                        <check name="ctype-limits"/>
                        <check name="stdlib-limits"/>
                    </rule>
                    <rule name="M2012.D.4.10" partial="0">
                        <check name="multiple-include"/>
                    </rule>
                    <rule name="M2012.D.4.7" partial="0">
                        <check name="error-information-unused"/>
                        <check name="error-information-unused-computed"/>
                    </rule>
                    <rule name="M2012.D.4.1" partial="1">
                        <check name="analysis-run"/>
                    </rule>
                    <rule name="M2012.22.5" partial="1">
                        <check name="file-dereference"/>
                    </rule>
                    <rule name="M2012.22.2" partial="1">
                        <check name="invalid-free"/>
                    </rule>
                    <rule name="M2012.21.11" partial="0">
                        <check name="include-tgmath"/>
                    </rule>
                    <rule name="M2012.21.10" partial="0">
                        <check name="include-time"/>
                        <check name="wcsftime"/>
                    </rule>
                    <rule name="M2012.21.9" partial="0">
                        <check name="stdlib-macro-compar"/>
                        <check name="stdlib-use-compar"/>
                    </rule>
                    <rule name="M2012.21.8" partial="0">
                        <check name="stdlib-macro"/>
                        <check name="stdlib-macro-getenv"/>
                        <check name="stdlib-use"/>
                        <check name="stdlib-use-getenv"/>
                        <check name="stdlib-use-system"/>
                    </rule>
                    <rule name="M2012.21.7" partial="0">
                        <check name="stdlib-macro-ato"/>
                        <check name="stdlib-macro-atoll"/>
                        <check name="stdlib-use-ato"/>
                        <check name="stdlib-use-atoll"/>
                    </rule>
                    <rule name="M2012.21.6" partial="0">
                        <check name="include-stdio"/>
                        <check name="stdlib-macro-stdio"/>
                        <check name="stdlib-macro-wchar"/>
                        <check name="stdlib-use-wchar"/>
                    </rule>
                    <rule name="M2012.21.5" partial="0">
                        <check name="include-signal"/>
                    </rule>
                    <rule name="M2012.21.4" partial="0">
                        <check name="include-setjmp"/>
                    </rule>
                    <rule name="M2012.21.3" partial="0">
                        <check name="stdlib-macro-alloc"/>
                        <check name="stdlib-use-alloc"/>
                    </rule>
                    <rule name="M2012.21.2" partial="0">
                        <check name="reserved-declaration"/>
                        <check name="reserved-declaration-c99"/>
                    </rule>
                    <rule name="M2012.21.1" partial="0">
                        <check name="language-override"/>
                        <check name="language-override-c99"/>
                        <check name="language-undefine"/>
                        <check name="language-undefine-c99"/>
                        <check name="reserved-identifier"/>
                    </rule>
                    <rule name="M2012.20.14" partial="0">
                        <check name="dangling-elsegroup"/>
                        <check name="unclosed-ifgroup"/>
                    </rule>
                    <rule name="M2012.20.13" partial="0">
                        <check name="directive-syntax"/>
                        <check name="extra-tokens"/>
                        <check name="non-directive"/>
                    </rule>
                    <rule name="M2012.20.11" partial="0">
                        <check name="hash-macro-order"/>
                    </rule>
                    <rule name="M2012.20.9" partial="0">
                        <check name="macro-undefined"/>
                    </rule>
                    <rule name="M2012.20.8" partial="0">
                        <check name="if-value"/>
                    </rule>
                    <rule name="M2012.20.6" partial="0">
                        <check name="macro-argument-hash"/>
                    </rule>
                    <rule name="M2012.20.4" partial="0">
                        <check name="keyword-override"/>
                    </rule>
                    <rule name="M2012.20.3" partial="0">
                        <check name="include-syntax"/>
                    </rule>
                    <rule name="M2012.20.2" partial="0">
                        <check name="include-characters"/>
                        <check name="include-characters-backslash"/>
                        <check name="include-characters-sline"/>
                    </rule>
                    <rule name="M2012.18.8" partial="0">
                        <check name="variable-array-length"/>
                    </rule>
                    <rule name="M2012.18.6" partial="0">
                        <check name="pointered-deallocation"/>
                    </rule>
                    <rule name="M2012.18.3" partial="1">
                        <check name="pointer-comparison"/>
                    </rule>
                    <rule name="M2012.18.2" partial="1">
                        <check name="pointer-subtraction"/>
                    </rule>
                    <rule name="M2012.17.8" partial="1">
                        <check name="parameter-assignment"/>
                    </rule>
                    <rule name="M2012.17.7" partial="0">
                        <check name="function-return-unused"/>
                    </rule>
                    <rule name="M2012.17.6" partial="0">
                        <check name="array-parameter-static-size"/>
                    </rule>
                    <rule name="M2012.17.4" partial="0">
                        <check name="return-empty"/>
                        <check name="return-implicit"/>
                    </rule>
                    <rule name="M2012.17.3" partial="0">
                        <check name="implicit-function-declaration"/>
                    </rule>
                    <rule name="M2012.17.2" partial="0">
                        <check name="recursion"/>
                    </rule>
                    <rule name="M2012.17.1" partial="0">
                        <check name="include-stdarg"/>
                    </rule>
                    <rule name="M2012.16.7" partial="0">
                        <check name="essentially-boolean-switch"/>
                    </rule>
                    <rule name="M2012.16.6" partial="0">
                        <check name="switch-clause-count"/>
                    </rule>
                    <rule name="M2012.16.5" partial="0">
                        <check name="switch-default-position"/>
                    </rule>
                    <rule name="M2012.16.4" partial="1">
                        <check name="switch-default"/>
                    </rule>
                    <rule name="M2012.16.3" partial="0">
                        <check name="switch-clause-break"/>
                    </rule>
                    <rule name="M2012.16.2" partial="0">
                        <check name="switch-label"/>
                    </rule>
                    <rule name="M2012.16.1" partial="0">
                        <check name="compound-switch"/>
                        <check name="switch-clause-break"/>
                        <check name="switch-clause-count"/>
                        <check name="switch-clause-empty-compound"/>
                        <check name="switch-clause-syntax"/>
                        <check name="switch-default-position"/>
                        <check name="switch-label"/>
                        <check name="switch-multiple-default"/>
                        <check name="switch-skipped-code"/>
                    </rule>
                    <rule name="M2012.15.7" partial="0">
                        <check name="missing-else"/>
                    </rule>
                    <rule name="M2012.15.6" partial="0">
                        <check name="compound-ifelse"/>
                        <check name="compound-loop"/>
                        <check name="compound-switch"/>
                    </rule>
                    <rule name="M2012.15.3" partial="0">
                        <check name="goto-nesting"/>
                    </rule>
                    <rule name="M2012.15.2" partial="0">
                        <check name="backjump"/>
                    </rule>
                    <rule name="M2012.14.4" partial="0">
                        <check name="boolean-control"/>
                    </rule>
                    <rule name="M2012.14.3" partial="1">
                        <check name="controlling-invariant"/>
                        <check name="controlling-invariant-expression"/>
                    </rule>
                    <rule name="M2012.14.2" partial="1">
                        <check name="for-loop-condition-sideeffect"/>
                    </rule>
                    <rule name="M2012.14.1" partial="1">
                        <check name="floating-point-loop-counter"/>
                    </rule>
                    <rule name="M2012.13.6" partial="0">
                        <check name="sizeof"/>
                    </rule>
                    <rule name="M2012.13.5" partial="1">
                        <check name="side-effect-in-logical-exp"/>
                    </rule>
                    <rule name="M2012.13.2" partial="1">
                        <check name="evaluation-order"/>
                        <check name="multiple-volatile-accesses"/>
                    </rule>
                    <rule name="M2012.13.1" partial="1">
                        <check name="side-effect-in-initializer-list"/>
                    </rule>
                    <rule name="M2012.12.2" partial="0">
                        <check name="essential-shift-width"/>
                        <check name="essential-shift-width-constant"/>
                    </rule>
                    <rule name="M2012.11.8" partial="0">
                        <check name="pointer-qualifier-cast-const"/>
                        <check name="pointer-qualifier-cast-const-implicit"/>
                        <check name="pointer-qualifier-cast-volatile"/>
                        <check name="pointer-qualifier-cast-volatile-implicit"/>
                    </rule>
                    <rule name="M2012.11.7" partial="0">
                        <check name="inappropriate-pointer-cast"/>
                        <check name="inappropriate-pointer-cast-implicit"/>
                    </rule>
                    <rule name="M2012.11.6" partial="0">
                        <check name="cast-pointer-void-arithmetic"/>
                        <check name="cast-pointer-void-arithmetic-implicit"/>
                    </rule>
                    <rule name="M2012.11.3" partial="0">
                        <check name="object-pointer-diff-cast"/>
                        <check name="object-pointer-diff-cast-implicit"/>
                    </rule>
                    <rule name="M2012.11.2" partial="0">
                        <check name="cast-pointer-incomplete"/>
                    </rule>
                    <rule name="M2012.11.1" partial="0">
                        <check name="function-pointer-cast"/>
                        <check name="function-pointer-integer-cast"/>
                        <check name="function-pointer-integer-cast-implicit"/>
                    </rule>
                    <rule name="M2012.10.8" partial="0">
                        <check name="composite-cast"/>
                    </rule>
                    <rule name="M2012.10.7" partial="0">
                        <check name="composite-type-width"/>
                    </rule>
                    <rule name="M2012.10.6" partial="0">
                        <check name="composite-assign"/>
                    </rule>
                    <rule name="M2012.10.4" partial="0">
                        <check name="essential-arithmetic-conversion"/>
                    </rule>
                    <rule name="M2012.10.3" partial="0">
                        <check name="essential-type-assign"/>
                    </rule>
                    <rule name="M2012.10.2" partial="0">
                        <check name="inappropriate-char-usage"/>
                    </rule>
                    <rule name="M2012.10.1" partial="0">
                        <check name="inappropriate-bool"/>
                        <check name="inappropriate-char"/>
                        <check name="inappropriate-enum"/>
                        <check name="inappropriate-int"/>
                    </rule>
                    <rule name="M2012.9.5" partial="0">
                        <check name="array-size-designator"/>
                    </rule>
                    <rule name="M2012.9.4" partial="0">
                        <check name="initializer-multiple"/>
                    </rule>
                    <rule name="M2012.9.3" partial="0">
                        <check name="array-initialization"/>
                    </rule>
                    <rule name="M2012.9.2" partial="0">
                        <check name="implicit-designation"/>
                    </rule>
                    <rule name="M2012.8.14" partial="0">
                        <check name="restrict"/>
                    </rule>
                    <rule name="M2012.8.12" partial="0">
                        <check name="enum-implicit-value"/>
                    </rule>
                    <rule name="M2012.8.10" partial="0">
                        <check name="inline-static"/>
                    </rule>
                    <rule name="M2012.8.8" partial="0">
                        <check name="static-function-declaration"/>
                        <check name="static-object-declaration"/>
                    </rule>
                    <rule name="M2012.8.6" partial="0">
                        <check name="definition-duplicate"/>
                        <check name="undefined-extern"/>
                    </rule>
                    <rule name="M2012.8.5" partial="0">
                        <check name="external-file-spreading"/>
                        <check name="external-redeclaration"/>
                    </rule>
                    <rule name="M2012.8.4" partial="0">
                        <check name="extern-function-declaration"/>
                        <check name="extern-object-declaration"/>
                    </rule>
                    <rule name="M2012.8.3" partial="0">
                        <check name="function-type-mismatch"/>
                        <check name="object-type-mismatch"/>
                        <check name="parameter-name-match"/>
                    </rule>
                    <rule name="M2012.8.2" partial="0">
                        <check name="function-prototype"/>
                        <check name="parameter-name"/>
                    </rule>
                    <rule name="M2012.8.1" partial="0">
                        <check name="function-return-type"/>
                        <check name="type-specifier"/>
                        <check name="undeclared-parameter"/>
                    </rule>
                    <rule name="M2012.7.4" partial="0">
                        <check name="literal-assignment"/>
                        <check name="string-literal-modification"/>
                    </rule>
                    <rule name="M2012.7.3" partial="0">
                        <check name="long-suffix"/>
                    </rule>
                    <rule name="M2012.7.2" partial="0">
                        <check name="integer-suffix"/>
                    </rule>
                    <rule name="M2012.7.1" partial="0">
                        <check name="octal-constant"/>
                    </rule>
                    <rule name="M2012.6.2" partial="0">
                        <check name="bitfield-signed-size"/>
                    </rule>
                    <rule name="M2012.6.1" partial="0" option="int">
                        <check name="bitfield-typing"/>
                    </rule>
                    <rule name="M2012.5.8" partial="0">
                        <check name="identifier-unique-extern"/>
                    </rule>
                    <rule name="M2012.5.7" partial="0">
                        <check name="identifier-unique-tag"/>
                    </rule>
                    <rule name="M2012.5.6" partial="0">
                        <check name="identifier-unique-typedef"/>
                    </rule>
                    <rule name="M2012.5.5" partial="0">
                        <check name="distinct-identifiers-macros"/>
                    </rule>
                    <rule name="M2012.5.4" partial="0">
                        <check name="distinct-macro"/>
                        <check name="distinct-macro-parameter"/>
                    </rule>
                    <rule name="M2012.5.3" partial="0">
                        <check name="distinct-identifier-hidden"/>
                    </rule>
                    <rule name="M2012.5.2" partial="0">
                        <check name="distinct-label"/>
                        <check name="distinct-member"/>
                        <check name="distinct-ordinary"/>
                        <check name="distinct-tags"/>
                    </rule>
                    <rule name="M2012.5.1" partial="0">
                        <check name="distinct-extern"/>
                    </rule>
                    <rule name="M2012.4.1" partial="0">
                        <check name="escape-termination"/>
                    </rule>
                    <rule name="M2012.3.2" partial="0">
                        <check name="sline-splicing"/>
                    </rule>
                    <rule name="M2012.3.1" partial="0">
                        <check name="mmline-comment"/>
                        <check name="sline-comment"/>
                        <check name="smline-comment"/>
                    </rule>
                    <rule name="M2012.2.2" partial="1">
                        <check name="expression-statement-dead"/>
                    </rule>
                    <rule name="M2012.2.1" partial="1">
                        <check name="controlling-invariant-expression"/>
                        <check name="unreachable-code"/>
                    </rule>
                    <rule name="A.5.3" partial="0">
                        <check name="unsupported-language-feature-fatal"/>
                    </rule>
                    <rule name="A.5.2" partial="0">
                        <check name="unsupported-language-feature"/>
                    </rule>
                    <rule name="A.5.1" partial="0">
                        <check name="excessive-interval"/>
                        <check name="invalid-directive"/>
                    </rule>
                    <rule name="A.4.2" partial="0">
                        <check name="evaluation-order-initializer"/>
                    </rule>
                    <rule name="A.4.1" partial="0">
                        <check name="evaluation-order"/>
                    </rule>
                    <rule name="A.3.3" partial="0" option="int">
                        <check name="bitfield-typing"/>
                    </rule>
                    <rule name="A.3.2" partial="0">
                        <check name="multi-character-constant"/>
                    </rule>
                    <rule name="A.3.1" partial="0">
                        <check name="function-pointer-integer-cast"/>
                        <check name="pointer-integral-cast"/>
                    </rule>
                    <rule name="A.2.16" partial="0">
                        <check name="attribute"/>
                    </rule>
                    <rule name="A.2.15" partial="0">
                        <check name="has-include"/>
                        <check name="has-include-next"/>
                    </rule>
                    <rule name="A.2.14" partial="0">
                        <check name="include-next"/>
                    </rule>
                    <rule name="A.2.13" partial="0">
                        <check name="alignof-void"/>
                        <check name="sizeof-void"/>
                    </rule>
                    <rule name="A.2.12" partial="0">
                        <check name="non-standard-identifier"/>
                    </rule>
                    <rule name="A.2.11" partial="0">
                        <check name="non-standard-escape-sequence"/>
                    </rule>
                    <rule name="A.2.10" partial="0">
                        <check name="binary-constant"/>
                    </rule>
                    <rule name="A.2.9" partial="0">
                        <check name="statement-expression"/>
                    </rule>
                    <rule name="A.2.8" partial="0">
                        <check name="pointer-attribute"/>
                    </rule>
                    <rule name="A.2.7" partial="0">
                        <check name="non-standard-keyword"/>
                    </rule>
                    <rule name="A.2.6" partial="0">
                        <check name="lvalue-cast"/>
                    </rule>
                    <rule name="A.2.5" partial="0">
                        <check name="forward-declared-enum"/>
                    </rule>
                    <rule name="A.2.4" partial="0">
                        <check name="constant-expression-extended"/>
                    </rule>
                    <rule name="A.2.3" partial="0">
                        <check name="at-location"/>
                    </rule>
                    <rule name="A.2.2" partial="0">
                        <check name="assembler"/>
                    </rule>
                    <rule name="A.2.1" partial="0">
                        <check name="implicit-function-declaration"/>
                    </rule>
                    <rule name="A.1.10" partial="0">
                        <check name="undeclared-parameter"/>
                    </rule>
                    <rule name="A.1.9" partial="0">
                        <check name="redeclaration"/>
                    </rule>
                    <rule name="A.1.8" partial="0">
                        <check name="initializer-excess"/>
                    </rule>
                    <rule name="A.1.7" partial="0">
                        <check name="assignment-to-non-modifiable-lvalue"/>
                    </rule>
                    <rule name="A.1.6" partial="0">
                        <check name="static-assert"/>
                    </rule>
                    <rule name="A.1.5" partial="0">
                        <check name="parameter-match-type"/>
                    </rule>
                    <rule name="A.1.4" partial="0">
                        <check name="function-pointer-integer-cast-implicit"/>
                        <check name="pointer-integral-cast-implicit"/>
                    </rule>
                    <rule name="A.1.3" partial="0">
                        <check name="function-return-type"/>
                        <check name="type-specifier"/>
                    </rule>
                    <rule name="A.1.2" partial="0">
                        <check name="invalid-array-size"/>
                    </rule>
                    <rule name="A.1.1" partial="0">
                        <check name="type-compatibility"/>
                        <check name="type-compatibility-link"/>
                    </rule>
                </rules>
            </configuration>
        </rulechecks>
        <analysis_directives>
            <directive hypothesis="1" location_id="l19">__ASTREE_assert((0 &lt;= msgId &amp;&amp; msgId &lt;= 99));</directive>
            <directive hypothesis="1" location_id="l20">__ASTREE_assert((0 &lt;= msgId &amp;&amp; msgId &lt;= 99));</directive>
            <directive hypothesis="1" location_id="l21">__ASTREE_assert((-2 &lt;= z &amp;&amp; z &lt;= 2));</directive>
            <directive hypothesis="1" location_id="l22">__ASTREE_volatile_input((select, [4,5]));</directive>
            <directive hypothesis="1" location_id="l23">__ASTREE_assert((seconds == 600));</directive>
            <directive hypothesis="1" location_id="l24">__ASTREE_volatile_input((SPEED_SENSOR, [0,40000]));</directive>
            <directive hypothesis="1" location_id="l25">__ASTREE_volatile_input((vx, [-1,1]));</directive>
            <directive hypothesis="1" location_id="l26">__ASTREE_volatile_input((vy, [-1,1]));</directive>
            <directive hypothesis="0" location_id="l27">__ASTREE_log_vars((result; inter));</directive>
            <directive hypothesis="0" location_id="l28">__ASTREE_log_vars((result; inter));</directive>
            <directive hypothesis="0" location_id="l29">__ASTREE_log_vars((result; inter));</directive>
            <directive hypothesis="0" location_id="l30">__ASTREE_unroll((6000));</directive>
            <directive hypothesis="0" location_id="l31">__ASTREE_log_vars((seconds; inter));</directive>
        </analysis_directives>
        <messages>
            <alarm_message location_id="l1" type="a173" duplicate="0">
                <textline location_id="l1">ALARM (R): check parameter-name failed (violates M2012.8.2-required)</textline>
            </alarm_message>
            <alarm_message location_id="l2" type="a173" duplicate="0">
                <textline location_id="l2">ALARM (R): check parameter-name failed (violates M2012.8.2-required)</textline>
            </alarm_message>
            <alarm_message location_id="l3" type="a407" duplicate="0">
                <textline location_id="l3">ALARM (R): check extern-function-declaration failed (violates M2012.8.4-required)</textline>
            </alarm_message>
            <alarm_message location_id="l4" type="a407" duplicate="0">
                <textline location_id="l4">ALARM (R): check extern-function-declaration failed (violates M2012.8.4-required)</textline>
            </alarm_message>
            <alarm_message location_id="l5" type="a407" duplicate="0">
                <textline location_id="l5">ALARM (R): check extern-function-declaration failed (violates M2012.8.4-required)</textline>
            </alarm_message>
            <alarm_message location_id="l6" type="a407" duplicate="0">
                <textline location_id="l6">ALARM (R): check extern-function-declaration failed (violates M2012.8.4-required)</textline>
            </alarm_message>
            <alarm_message location_id="l7" type="a407" duplicate="0">
                <textline location_id="l7">ALARM (R): check extern-function-declaration failed (violates M2012.8.4-required)</textline>
            </alarm_message>
            <alarm_message location_id="l8" type="a372" duplicate="0">
                <textline location_id="l8">ALARM (R): check function-prototype failed (violates M2012.8.2-required)</textline>
            </alarm_message>
            <alarm_message location_id="l9" type="a416" duplicate="0">
                <textline location_id="l9">[ assigning essentially floating to essentially signed</textline>
                <textline location_id="l9">ALARM (R): check essential-type-assign failed (violates M2012.10.3-required)</textline>
            </alarm_message>
            <alarm_message location_id="l10" type="a492" duplicate="0">
                <textline location_id="l10">[ expected essentially Boolean but is essentially signed</textline>
                <textline location_id="l10">ALARM (R): check boolean-control failed (violates M2012.14.4-required)</textline>
            </alarm_message>
            <alarm_message location_id="l11" type="a465" duplicate="0">
                <textline location_id="l11">ALARM (R): check compound-loop failed (violates M2012.15.6-required)</textline>
            </alarm_message>
            <alarm_message location_id="l12" type="a416" duplicate="0">
                <textline location_id="l12">[ assigning essentially signed to essentially character</textline>
                <textline location_id="l12">ALARM (R): check essential-type-assign failed (violates M2012.10.3-required)</textline>
            </alarm_message>
            <alarm_message location_id="l13" type="a492" duplicate="0">
                <textline location_id="l13">[ expected essentially Boolean but is essentially signed</textline>
                <textline location_id="l13">ALARM (R): check boolean-control failed (violates M2012.14.4-required)</textline>
            </alarm_message>
            <alarm_message location_id="l14" type="a465" duplicate="0">
                <textline location_id="l14">ALARM (R): check compound-loop failed (violates M2012.15.6-required)</textline>
            </alarm_message>
            <alarm_message location_id="l15" type="a416" duplicate="0">
                <textline location_id="l15">[ assigning essentially signed to essentially character</textline>
                <textline location_id="l15">ALARM (R): check essential-type-assign failed (violates M2012.10.3-required)</textline>
            </alarm_message>
            <alarm_message location_id="l16" type="a471" duplicate="0">
                <textline location_id="l16">[ casting from essentially unsigned to essentially signed</textline>
                <textline location_id="l16">ALARM (R): check composite-cast failed (violates M2012.10.8-required)</textline>
            </alarm_message>
            <alarm_message location_id="l17" type="a419" duplicate="0">
                <textline location_id="l17">[ the essential operand types are signed and floating</textline>
                <textline location_id="l17">ALARM (R): check essential-arithmetic-conversion failed (violates M2012.10.4-required)</textline>
            </alarm_message>
            <alarm_message location_id="l18" type="a492" duplicate="0">
                <textline location_id="l18">[ expected essentially Boolean but is essentially signed</textline>
                <textline location_id="l18">ALARM (R): check boolean-control failed (violates M2012.14.4-required)</textline>
            </alarm_message>
            <alarm_message context="l32#call#main@48" location_id="l33" type="a5" duplicate="0">
                <textline location_id="l33">ALARM (A): double-&gt;signed short conversion range [0, 40000] not included in [-32768, 32767]</textline>
            </alarm_message>
            <alarm_message context="l32#call#main@48" location_id="l10" type="a555" duplicate="0">
                <textline location_id="l10">ALARM (A): uninitialized read: reading 4 byte(s) at offset(s) 0 in variable uninitialized_1</textline>
            </alarm_message>
            <alarm_message context="l32#call#main@48,l34#loop@72=11/12" location_id="l35" type="a561" duplicate="0">
                <textline location_id="l35">ALARM (A): out-of-bound array index {10} not included in [0, 9]</textline>
            </alarm_message>
            <error_message context="l32#call#main@48,l34#loop@72=11/12" location_id="l36" type="a542" duplicate="0">
                <textline location_id="l36">ERROR: Definite runtime error during assignment in this context. Analysis stopped for this context.</textline>
            </error_message>
            <alarm_message context="l32#call#main@48" location_id="l13" type="a555" duplicate="0">
                <textline location_id="l13">ALARM (A): uninitialized read: reading 4 byte(s) at offset(s) 0 in variable uninitialized_2</textline>
            </alarm_message>
            <alarm_message context="l32#call#main@48,l37#loop@77=11/12" location_id="l38" type="a576" duplicate="0">
                <textline location_id="l38">ALARM (A): invalid dereference: dereferencing 1 byte(s) at offset(s) 10 may overflow the variable ArrayBlock of byte-size 10</textline>
            </alarm_message>
            <error_message context="l32#call#main@48,l37#loop@77=11/12" location_id="l39" type="a542" duplicate="0">
                <textline location_id="l39">ERROR: Definite runtime error during assignment in this context. Analysis stopped for this context.</textline>
            </error_message>
            <alarm_message context="l32#call#main@48" location_id="l23" type="a570" duplicate="0">
                <textline location_id="l23">ALARM (A): assert failure __ASTREE_assert((seconds == 600))</textline>
            </alarm_message>
            <alarm_message context="l32#call#main@48,l44#loop@124=1/1" location_id="l45" type="a555" duplicate="0">
                <textline location_id="l45">ALARM (A): uninitialized read: reading 4 byte(s) at offset(s) 0 in variable i</textline>
            </alarm_message>
            <alarm_message context="l32#call#main@48,l44#loop@124=1/1" location_id="l46" type="a7" duplicate="0">
                <textline location_id="l46">ALARM (C): signed int arithmetic range [-2147483647, 2147483648] not included in [-2147483648, 2147483647]</textline>
            </alarm_message>
            <alarm_message context="l32#call#main@48,l44#loop@124&gt;=2" location_id="l46" type="a7" duplicate="1">
                <textline location_id="l46">ALARM (C): signed int arithmetic range [-2147483647, 2147483648] not included in [-2147483648, 2147483647]</textline>
            </alarm_message>
            <alarm_message context="l32#call#main@48,l47#loop@130&gt;=2" location_id="l48" type="a551" duplicate="0">
                <textline location_id="l48">ALARM (D): Loop never terminates for this context.</textline>
            </alarm_message>
            <note_message location_id="l32" type="a532" duplicate="0">
                <textline location_id="l32">NOTE: Analyzed entry-point main never returns.</textline>
            </note_message>
            <alarm_message location_id="l49" type="a457" duplicate="0">
                <textline location_id="l49">ALARM (R): check controlling-invariant failed (violates M2012.14.3-required)</textline>
            </alarm_message>
            <alarm_message location_id="l50" type="a457" duplicate="0">
                <textline location_id="l50">ALARM (R): check controlling-invariant failed (violates M2012.14.3-required)</textline>
            </alarm_message>
            <alarm_message location_id="l51" type="a206" duplicate="0">
                <textline location_id="l51">ALARM (R): check multiple-volatile-accesses failed (violates M2012.13.2-required)</textline>
            </alarm_message>
            <alarm_message location_id="l18" type="a457" duplicate="0">
                <textline location_id="l18">ALARM (R): check controlling-invariant failed (violates M2012.14.3-required)</textline>
            </alarm_message>
            <note_message location_id="l44" type="a532" duplicate="0">
                <textline location_id="l44">NOTE: Loop may be unbounded</textline>
            </note_message>
            <alarm_message type="a522" duplicate="0">
                <textline>ALARM (R): check analysis-run failed (violates M2012.D.4.1-required)</textline>
            </alarm_message>
            <alarm_message location_id="l52" type="a24" duplicate="0">
                <textline location_id="l52">ALARM (R): check unreachable-code failed (violates M2012.2.1-required)</textline>
            </alarm_message>
        </messages>
        <coverage statement_count="52" not_reached_count="1">
            <file_coverage file_id="p12" statement_count="0" not_reached_count="0" ignored="0"/>
            <file_coverage file_id="p13" statement_count="52" not_reached_count="1" ignored="0">
                <function_coverage function_id="f98" statement_count="46" not_reached_count="1">
                    <not_reached_location type="analysis" location_id="l52" function="main" complete_function="0"/>
                </function_coverage>
                <function_coverage function_id="f94" statement_count="1" not_reached_count="0"/>
                <function_coverage function_id="f97" statement_count="1" not_reached_count="0"/>
                <function_coverage function_id="f87" statement_count="2" not_reached_count="0"/>
                <function_coverage function_id="f89" statement_count="2" not_reached_count="0"/>
            </file_coverage>
        </coverage>
        <metrics>
            <metric type="app" FILES="2" FUN="5" LINE="147" PLINE="78" RPATH="0"/>
            <metric type="file" id="o10" CDFILE="0.00" FUN="0" LINE="5" PLINE="3"/>
            <metric type="file" id="o11" CDFILE="0.38" FUN="5" LINE="142" PLINE="75"/>
            <metric type="fun" id="f87" CALLING="1" CALLS="0" CDFUN="1.00" CYCL="1" GOTO="0" LEVEL="1" LSCOPE="1.00" MLINE="2" PARAM="2" PATH="1" RETURN="0" STMT="1" Location="scenarios.c:23.0-27.1"/>
            <metric type="fun" id="f89" CALLING="1" CALLS="0" CDFUN="1.00" CYCL="1" GOTO="0" LEVEL="1" LSCOPE="1.20" MLINE="2" PARAM="1" PATH="1" RETURN="1" STMT="1" Location="scenarios.c:30.0-34.1"/>
            <metric type="fun" id="f94" CALLING="0" CALLS="0" CDFUN="1.00" CYCL="1" GOTO="0" LEVEL="1" LSCOPE="1.17" MLINE="1" PARAM="2" PATH="1" RETURN="1" STMT="1" Location="scenarios.c:37.0-40.1"/>
            <metric type="fun" id="f98" CALLING="0" CALLS="2" CDFUN="0.39" CYCL="8" GOTO="0" LEVEL="3" LSCOPE="3.11" MLINE="85" PARAM="0" PATH="72" RETURN="1" STMT="23" Location="scenarios.c:48.0-135.1"/>
            <metric type="fun" id="f97" CALLING="0" CALLS="0" CDFUN="1.00" CYCL="1" GOTO="0" LEVEL="1" LSCOPE="1.17" MLINE="1" PARAM="2" PATH="1" RETURN="1" STMT="1" Location="scenarios.c:43.0-46.1"/>
        </metrics>
        <functions>
            <function id="f87" name="registerMsg" location_id="l40" is_stub="0"/>
            <function id="f89" name="sendMsg" location_id="l41" is_stub="0"/>
            <function id="f94" name="msg1" location_id="l42" is_stub="0"/>
            <function id="f97" name="msg2" location_id="l43" is_stub="0"/>
            <function id="f98" name="main" location_id="l32" is_stub="0"/>
        </functions>
        <files>
            <file preprocessed="1" name="[Configuration.Annotations]" id="p4"/>
            <file preprocessed="1" name="[Configuration.Parser.External Declarations]" id="p3"/>
            <file preprocessed="1" name="preprocessed/src/astree.cfg" id="p12"/>
            <file preprocessed="1" name="preprocessed/src/scenarios.c" id="p13"/>
            <file preprocessed="0" name="[Configuration.Preprocessor]" id="o2"/>
            <file preprocessed="0" name="/tmp/a3c-UsXeGc/examples/src/astree.cfg" id="o10"/>
            <file preprocessed="0" name="/tmp/a3c-UsXeGc/examples/src/scenarios.c" id="o11"/>
        </files>
        <locations>
            <location id="l35" p_file="p13" p_start_line="73" p_start_col="19" p_end_line="73" p_end_col="20" o_file="o11" o_start_line="79" o_end_line="79"/>
            <location id="l34" p_file="p13" p_start_line="72" p_start_col="6" p_end_line="73" p_end_col="26" o_file="o11" o_start_line="78" o_end_line="79"/>
            <location id="l33" p_file="p13" p_start_line="64" p_start_col="4" p_end_line="64" p_end_col="20" o_file="o11" o_start_line="70" o_end_line="70"/>
            <location id="l32" p_file="p13" p_start_line="48" p_start_col="0" p_end_line="135" p_end_col="1" o_file="o11" o_start_line="54" o_end_line="141"/>
            <location id="l39" p_file="p13" p_start_line="78" p_start_col="8" p_end_line="78" p_end_col="16" o_file="o11" o_start_line="84" o_end_line="84"/>
            <location id="l38" p_file="p13" p_start_line="78" p_start_col="8" p_end_line="78" p_end_col="14" o_file="o11" o_start_line="84" o_end_line="84"/>
            <location id="l37" p_file="p13" p_start_line="77" p_start_col="6" p_end_line="78" p_end_col="17" o_file="o11" o_start_line="83" o_end_line="84"/>
            <location id="l36" p_file="p13" p_start_line="73" p_start_col="8" p_end_line="73" p_end_col="25" o_file="o11" o_start_line="79" o_end_line="79"/>
            <location id="l43" p_file="p13" p_start_line="43" p_start_col="0" p_end_line="46" p_end_col="1" o_file="o11" o_start_line="49" o_end_line="52"/>
            <location id="l42" p_file="p13" p_start_line="37" p_start_col="0" p_end_line="40" p_end_col="1" o_file="o11" o_start_line="43" o_end_line="46"/>
            <location id="l41" p_file="p13" p_start_line="30" p_start_col="0" p_end_line="34" p_end_col="1" o_file="o11" o_start_line="36" o_end_line="40"/>
            <location id="l40" p_file="p13" p_start_line="23" p_start_col="0" p_end_line="27" p_end_col="1" o_file="o11" o_start_line="29" o_end_line="33"/>
            <location id="l47" p_file="p13" p_start_line="130" p_start_col="4" p_end_line="132" p_end_col="5" o_file="o11" o_start_line="136" o_end_line="138"/>
            <location id="l46" p_file="p13" p_start_line="125" p_start_col="8" p_end_line="125" p_end_col="11" o_file="o11" o_start_line="131" o_end_line="131"/>
            <location id="l45" p_file="p13" p_start_line="125" p_start_col="8" p_end_line="125" p_end_col="9" o_file="o11" o_start_line="131" o_end_line="131"/>
            <location id="l44" p_file="p13" p_start_line="124" p_start_col="3" p_end_line="126" p_end_col="5" o_file="o11" o_start_line="130" o_end_line="132"/>
            <location id="l19" p_file="p13" p_start_line="25" p_start_col="4" p_end_line="25" p_end_col="48" o_file="o11" o_start_line="31" o_end_line="31"/>
            <location id="l18" p_file="p13" p_start_line="130" p_start_col="11" p_end_line="130" p_end_col="14" o_file="o11" o_start_line="136" o_end_line="136"/>
            <location id="l17" p_file="p13" p_start_line="124" p_start_col="10" p_end_line="124" p_end_col="27" o_file="o11" o_start_line="130" o_end_line="130"/>
            <location id="l16" p_file="p13" p_start_line="86" p_start_col="8" p_end_line="86" p_end_col="56" o_file="o11" o_start_line="92" o_end_line="92"/>
            <location id="l23" p_file="p13" p_start_line="121" p_start_col="4" p_end_line="121" p_end_col="39" o_file="o11" o_start_line="127" o_end_line="127"/>
            <location id="l22" p_file="p13" p_start_line="104" p_start_col="4" p_end_line="104" p_end_col="45" o_file="o11" o_start_line="110" o_end_line="110"/>
            <location id="l21" p_file="p13" p_start_line="87" p_start_col="4" p_end_line="87" p_end_col="36" o_file="o11" o_start_line="93" o_end_line="93"/>
            <location id="l20" p_file="p13" p_start_line="32" p_start_col="4" p_end_line="32" p_end_col="47" o_file="o11" o_start_line="38" o_end_line="38"/>
            <location id="l27" p_file="p13" p_start_line="98" p_start_col="4" p_end_line="98" p_end_col="38" o_file="o11" o_start_line="104" o_end_line="104"/>
            <location id="l26" p_file="p12" p_start_line="14" p_start_col="0" p_end_line="14" p_end_col="38" o_file="o10" o_start_line="3" o_end_line="3"/>
            <location id="l25" p_file="p12" p_start_line="13" p_start_col="0" p_end_line="13" p_end_col="38" o_file="o10" o_start_line="2" o_end_line="2"/>
            <location id="l24" p_file="p12" p_start_line="12" p_start_col="0" p_end_line="12" p_end_col="52" o_file="o10" o_start_line="1" o_end_line="1"/>
            <location id="l31" p_file="p13" p_start_line="120" p_start_col="4" p_end_line="120" p_end_col="43" o_file="o11" o_start_line="126" o_end_line="126"/>
            <location id="l30" p_file="p13" p_start_line="114" p_start_col="4" p_end_line="117" p_end_col="5" o_file="o11" o_start_line="120" o_end_line="123"/>
            <location id="l29" p_file="p13" p_start_line="106" p_start_col="4" p_end_line="106" p_end_col="38" o_file="o11" o_start_line="112" o_end_line="112"/>
            <location id="l28" p_file="p13" p_start_line="101" p_start_col="4" p_end_line="101" p_end_col="38" o_file="o11" o_start_line="107" o_end_line="107"/>
            <location id="l3" p_file="p13" p_start_line="23" p_start_col="5" p_end_line="23" p_end_col="16" o_file="o11" o_start_line="29" o_end_line="29"/>
            <location id="l2" p_file="p13" p_start_line="20" p_start_col="27" p_end_line="20" p_end_col="30" o_file="o11" o_start_line="26" o_end_line="26"/>
            <location id="l1" p_file="p13" p_start_line="20" p_start_col="23" p_end_line="20" p_end_col="26" o_file="o11" o_start_line="26" o_end_line="26"/>
            <location id="l7" p_file="p13" p_start_line="48" p_start_col="4" p_end_line="48" p_end_col="8" o_file="o11" o_start_line="54" o_end_line="54"/>
            <location id="l6" p_file="p13" p_start_line="43" p_start_col="4" p_end_line="43" p_end_col="8" o_file="o11" o_start_line="49" o_end_line="49"/>
            <location id="l5" p_file="p13" p_start_line="37" p_start_col="4" p_end_line="37" p_end_col="8" o_file="o11" o_start_line="43" o_end_line="43"/>
            <location id="l4" p_file="p13" p_start_line="30" p_start_col="4" p_end_line="30" p_end_col="11" o_file="o11" o_start_line="36" o_end_line="36"/>
            <location id="l11" p_file="p13" p_start_line="72" p_start_col="6" p_end_line="72" p_end_col="9" o_file="o11" o_start_line="78" o_end_line="78"/>
            <location id="l10" p_file="p13" p_start_line="71" p_start_col="8" p_end_line="71" p_end_col="23" o_file="o11" o_start_line="77" o_end_line="77"/>
            <location id="l9" p_file="p13" p_start_line="64" p_start_col="8" p_end_line="64" p_end_col="20" o_file="o11" o_start_line="70" o_end_line="70"/>
            <location id="l8" p_file="p13" p_start_line="48" p_start_col="4" p_end_line="48" p_end_col="10" o_file="o11" o_start_line="54" o_end_line="54"/>
            <location id="l15" p_file="p13" p_start_line="78" p_start_col="15" p_end_line="78" p_end_col="16" o_file="o11" o_start_line="84" o_end_line="84"/>
            <location id="l14" p_file="p13" p_start_line="77" p_start_col="6" p_end_line="77" p_end_col="9" o_file="o11" o_start_line="83" o_end_line="83"/>
            <location id="l13" p_file="p13" p_start_line="76" p_start_col="8" p_end_line="76" p_end_col="23" o_file="o11" o_start_line="82" o_end_line="82"/>
            <location id="l12" p_file="p13" p_start_line="73" p_start_col="24" p_end_line="73" p_end_col="25" o_file="o11" o_start_line="79" o_end_line="79"/>
            <location id="l51" p_file="p13" p_start_line="86" p_start_col="4" p_end_line="86" p_end_col="56" o_file="o11" o_start_line="92" o_end_line="92"/>
            <location id="l50" p_file="p13" p_start_line="77" p_start_col="16" p_end_line="77" p_end_col="21" o_file="o11" o_start_line="83" o_end_line="83"/>
            <location id="l49" p_file="p13" p_start_line="72" p_start_col="16" p_end_line="72" p_end_col="21" o_file="o11" o_start_line="78" o_end_line="78"/>
            <location id="l48" p_file="p13" p_start_line="130" p_start_col="4" p_end_line="130" p_end_col="9" o_file="o11" o_start_line="136" o_end_line="136"/>
            <location id="l52" p_file="p13" p_start_line="134" p_start_col="4" p_end_line="134" p_end_col="13" o_file="o11" o_start_line="140" o_end_line="140"/>
        </locations>
    </analysis>
    <alarm_categories>
        <alarm_category id="c1">Failed coding rule checks</alarm_category>
        <alarm_category id="c11">Errors</alarm_category>
        <alarm_category id="c12">Notifications</alarm_category>
        <alarm_category id="c13">Unknown</alarm_category>
        <alarm_category id="c14">Invalid usage of pointers and arrays</alarm_category>
        <alarm_category id="c15">Invalid ranges and overflows</alarm_category>
        <alarm_category id="c16">Invalid shift argument</alarm_category>
        <alarm_category id="c17">Division or modulo by zero</alarm_category>
        <alarm_category id="c18">Failed or invalid directives</alarm_category>
        <alarm_category id="c19">Invalid function calls</alarm_category>
        <alarm_category id="c20">Uninitialized variables</alarm_category>
        <alarm_category id="c21">Data and control flow alarms</alarm_category>
        <alarm_category id="c22">Invalid concurrent behavior</alarm_category>
    </alarm_categories>
    <alarm_types>
        <alarm_type id="a19" category_id="c1" class="R">Unused parameter</alarm_type>
        <alarm_type id="a18" category_id="c1" class="R">Unused tag</alarm_type>
        <alarm_type id="a17" category_id="c1" class="R">Unused typedef</alarm_type>
        <alarm_type id="a16" category_id="c1" class="R">Variable array length</alarm_type>
        <alarm_type id="a23" category_id="c1" class="R">Unsupported language feature</alarm_type>
        <alarm_type id="a22" category_id="c1" class="R">Unsupported language feature fatal</alarm_type>
        <alarm_type id="a21" category_id="c1" class="R">Unused label</alarm_type>
        <alarm_type id="a20" category_id="c1" class="R">Unused macro</alarm_type>
        <alarm_type id="a27" category_id="c1" class="R">Union typedef name min length</alarm_type>
        <alarm_type id="a26" category_id="c1" class="R">Universal character name</alarm_type>
        <alarm_type id="a25" category_id="c1" class="R">Unnamed constant</alarm_type>
        <alarm_type id="a24" category_id="c1" class="R">Unreachable code</alarm_type>
        <alarm_type id="a31" category_id="c1" class="R">Union tag min length</alarm_type>
        <alarm_type id="a30" category_id="c1" class="R">Union tag spelling</alarm_type>
        <alarm_type id="a29" category_id="c1" class="R">Union typedef name</alarm_type>
        <alarm_type id="a28" category_id="c1" class="R">Union typedef name max length</alarm_type>
        <alarm_type id="a11" category_id="c1" class="R">Wide narrow string cast implicit</alarm_type>
        <alarm_type id="a10" category_id="c1" class="R">Write data race</alarm_type>
        <alarm_type id="a9" category_id="c1" class="R">Write to constant memory</alarm_type>
        <alarm_type id="a8" category_id="c1" class="R">Write to string literal</alarm_type>
        <alarm_type id="a15" category_id="c1" class="R">Variable name length</alarm_type>
        <alarm_type id="a14" category_id="c1" class="R">Wcsftime</alarm_type>
        <alarm_type id="a13" category_id="c1" class="R">Whitespaces around binary</alarm_type>
        <alarm_type id="a12" category_id="c1" class="R">Wide narrow string cast</alarm_type>
        <alarm_type id="a51" category_id="c1" class="R">Typedef name</alarm_type>
        <alarm_type id="a50" category_id="c1" class="R">Typedef name max length</alarm_type>
        <alarm_type id="a49" category_id="c1" class="R">Typedef name min length</alarm_type>
        <alarm_type id="a48" category_id="c1" class="R">Unary assign detachment</alarm_type>
        <alarm_type id="a55" category_id="c1" class="R">Trigraph</alarm_type>
        <alarm_type id="a54" category_id="c1" class="R">Type compatibility</alarm_type>
        <alarm_type id="a53" category_id="c1" class="R">Type compatibility link</alarm_type>
        <alarm_type id="a52" category_id="c1" class="R">Type specifier</alarm_type>
        <alarm_type id="a59" category_id="c1" class="R">Switch label</alarm_type>
        <alarm_type id="a58" category_id="c1" class="R">Switch multiple default</alarm_type>
        <alarm_type id="a57" category_id="c1" class="R">Switch skipped code</alarm_type>
        <alarm_type id="a56" category_id="c1" class="R">Tabulator</alarm_type>
        <alarm_type id="a63" category_id="c1" class="R">Switch default position</alarm_type>
        <alarm_type id="a62" category_id="c1" class="R">Switch enum default</alarm_type>
        <alarm_type id="a61" category_id="c1" class="R">Switch final default</alarm_type>
        <alarm_type id="a60" category_id="c1" class="R">Switch in switch</alarm_type>
        <alarm_type id="a35" category_id="c1" class="R">Union member name max length</alarm_type>
        <alarm_type id="a34" category_id="c1" class="R">Union member name min length</alarm_type>
        <alarm_type id="a33" category_id="c1" class="R">Union object</alarm_type>
        <alarm_type id="a32" category_id="c1" class="R">Union tag max length</alarm_type>
        <alarm_type id="a39" category_id="c1" class="R">Uninitialized variable use</alarm_type>
        <alarm_type id="a38" category_id="c1" class="R">Union</alarm_type>
        <alarm_type id="a37" category_id="c1" class="R">Union assignment</alarm_type>
        <alarm_type id="a36" category_id="c1" class="R">Union member name</alarm_type>
        <alarm_type id="a43" category_id="c1" class="R">Undef</alarm_type>
        <alarm_type id="a42" category_id="c1" class="R">Undefined extern</alarm_type>
        <alarm_type id="a41" category_id="c1" class="R">Underlying minus</alarm_type>
        <alarm_type id="a40" category_id="c1" class="R">Uninitialized local read</alarm_type>
        <alarm_type id="a47" category_id="c1" class="R">Unary assign separation</alarm_type>
        <alarm_type id="a46" category_id="c1" class="R">Unary minus</alarm_type>
        <alarm_type id="a45" category_id="c1" class="R">Unclosed ifgroup</alarm_type>
        <alarm_type id="a44" category_id="c1" class="R">Undeclared parameter</alarm_type>
        <alarm_type id="a83" category_id="c1" class="R">Stdlib use wchar</alarm_type>
        <alarm_type id="a82" category_id="c1" class="R">Stream argument with side effects</alarm_type>
        <alarm_type id="a81" category_id="c1" class="R">String literal modification</alarm_type>
        <alarm_type id="a80" category_id="c1" class="R">Struct member name</alarm_type>
        <alarm_type id="a87" category_id="c1" class="R">Stdlib use getenv</alarm_type>
        <alarm_type id="a86" category_id="c1" class="R">Stdlib use rand</alarm_type>
        <alarm_type id="a85" category_id="c1" class="R">Stdlib use signal</alarm_type>
        <alarm_type id="a84" category_id="c1" class="R">Stdlib use system</alarm_type>
        <alarm_type id="a91" category_id="c1" class="R">Stdlib use ato</alarm_type>
        <alarm_type id="a90" category_id="c1" class="R">Stdlib use atoll</alarm_type>
        <alarm_type id="a89" category_id="c1" class="R">Stdlib use compar</alarm_type>
        <alarm_type id="a88" category_id="c1" class="R">Stdlib use fenv</alarm_type>
        <alarm_type id="a95" category_id="c1" class="R">Stdlib macro stdio</alarm_type>
        <alarm_type id="a94" category_id="c1" class="R">Stdlib macro wchar</alarm_type>
        <alarm_type id="a93" category_id="c1" class="R">Stdlib use</alarm_type>
        <alarm_type id="a92" category_id="c1" class="R">Stdlib use alloc</alarm_type>
        <alarm_type id="a67" category_id="c1" class="R">Switch clause empty compound</alarm_type>
        <alarm_type id="a66" category_id="c1" class="R">Switch clause syntax</alarm_type>
        <alarm_type id="a65" category_id="c1" class="R">Switch clauses</alarm_type>
        <alarm_type id="a64" category_id="c1" class="R">Switch default</alarm_type>
        <alarm_type id="a71" category_id="c1" class="R">Struct typedef name min length</alarm_type>
        <alarm_type id="a70" category_id="c1" class="R">Switch clause break</alarm_type>
        <alarm_type id="a69" category_id="c1" class="R">Switch clause count</alarm_type>
        <alarm_type id="a68" category_id="c1" class="R">Switch clause empty</alarm_type>
        <alarm_type id="a75" category_id="c1" class="R">Struct tag spelling</alarm_type>
        <alarm_type id="a74" category_id="c1" class="R">Struct type incomplete</alarm_type>
        <alarm_type id="a73" category_id="c1" class="R">Struct typedef name</alarm_type>
        <alarm_type id="a72" category_id="c1" class="R">Struct typedef name max length</alarm_type>
        <alarm_type id="a79" category_id="c1" class="R">Struct member name max length</alarm_type>
        <alarm_type id="a78" category_id="c1" class="R">Struct member name min length</alarm_type>
        <alarm_type id="a77" category_id="c1" class="R">Struct tag max length</alarm_type>
        <alarm_type id="a76" category_id="c1" class="R">Struct tag min length</alarm_type>
        <alarm_type id="a115" category_id="c1" class="R">Statement sideeffect</alarm_type>
        <alarm_type id="a114" category_id="c1" class="R">Statement whitespace</alarm_type>
        <alarm_type id="a113" category_id="c1" class="R">Static assert</alarm_type>
        <alarm_type id="a112" category_id="c1" class="R">Static function declaration</alarm_type>
        <alarm_type id="a119" category_id="c1" class="R">Sline splicing</alarm_type>
        <alarm_type id="a118" category_id="c1" class="R">Smline comment</alarm_type>
        <alarm_type id="a117" category_id="c1" class="R">Statement expression</alarm_type>
        <alarm_type id="a116" category_id="c1" class="R">Statement line</alarm_type>
        <alarm_type id="a123" category_id="c1" class="R">Sizeof non object</alarm_type>
        <alarm_type id="a122" category_id="c1" class="R">Sizeof parenthesized</alarm_type>
        <alarm_type id="a121" category_id="c1" class="R">Sizeof void</alarm_type>
        <alarm_type id="a120" category_id="c1" class="R">Sline comment</alarm_type>
        <alarm_type id="a127" category_id="c1" class="R">Signal handler signal call</alarm_type>
        <alarm_type id="a126" category_id="c1" class="R">Simple escape sequence</alarm_type>
        <alarm_type id="a125" category_id="c1" class="R">Sizeof</alarm_type>
        <alarm_type id="a124" category_id="c1" class="R">Sizeof array parameter</alarm_type>
        <alarm_type id="a99" category_id="c1" class="R">Stdlib macro ato</alarm_type>
        <alarm_type id="a98" category_id="c1" class="R">Stdlib macro atoll</alarm_type>
        <alarm_type id="a97" category_id="c1" class="R">Stdlib macro compar</alarm_type>
        <alarm_type id="a96" category_id="c1" class="R">Stdlib macro getenv</alarm_type>
        <alarm_type id="a103" category_id="c1" class="R">Stdlib const pointer assign</alarm_type>
        <alarm_type id="a102" category_id="c1" class="R">Stdlib limits</alarm_type>
        <alarm_type id="a101" category_id="c1" class="R">Stdlib macro</alarm_type>
        <alarm_type id="a100" category_id="c1" class="R">Stdlib macro alloc</alarm_type>
        <alarm_type id="a107" category_id="c1" class="R">Static object declaration</alarm_type>
        <alarm_type id="a106" category_id="c1" class="R">Static object name</alarm_type>
        <alarm_type id="a105" category_id="c1" class="R">Static object name max length</alarm_type>
        <alarm_type id="a104" category_id="c1" class="R">Static object name min length</alarm_type>
        <alarm_type id="a111" category_id="c1" class="R">Static function name</alarm_type>
        <alarm_type id="a110" category_id="c1" class="R">Static function name max length</alarm_type>
        <alarm_type id="a109" category_id="c1" class="R">Static function name min length</alarm_type>
        <alarm_type id="a108" category_id="c1" class="R">Static identifier reuse</alarm_type>
        <alarm_type id="a147" category_id="c1" class="R">Precision shift width constant</alarm_type>
        <alarm_type id="a146" category_id="c1" class="R">Preprocessor wrap around</alarm_type>
        <alarm_type id="a145" category_id="c1" class="R">Promoted bitop type</alarm_type>
        <alarm_type id="a144" category_id="c1" class="R">Read data race</alarm_type>
        <alarm_type id="a151" category_id="c1" class="R">Pragma</alarm_type>
        <alarm_type id="a150" category_id="c1" class="R">Pragma usage</alarm_type>
        <alarm_type id="a149" category_id="c1" class="R">Precedence</alarm_type>
        <alarm_type id="a148" category_id="c1" class="R">Precision shift width</alarm_type>
        <alarm_type id="a155" category_id="c1" class="R">Pointer subtraction</alarm_type>
        <alarm_type id="a154" category_id="c1" class="R">Pointer to pointer</alarm_type>
        <alarm_type id="a153" category_id="c1" class="R">Pointer typedef</alarm_type>
        <alarm_type id="a152" category_id="c1" class="R">Pointered deallocation</alarm_type>
        <alarm_type id="a159" category_id="c1" class="R">Pointer qualifier cast const implicit</alarm_type>
        <alarm_type id="a158" category_id="c1" class="R">Pointer qualifier cast volatile</alarm_type>
        <alarm_type id="a157" category_id="c1" class="R">Pointer qualifier cast volatile implicit</alarm_type>
        <alarm_type id="a156" category_id="c1" class="R">Pointer subscript</alarm_type>
        <alarm_type id="a131" category_id="c1" class="R">Side effect in initializer list</alarm_type>
        <alarm_type id="a130" category_id="c1" class="R">Side effect in logical exp</alarm_type>
        <alarm_type id="a129" category_id="c1" class="R">Signal handler unsafe call</alarm_type>
        <alarm_type id="a128" category_id="c1" class="R">Signal handler shared access</alarm_type>
        <alarm_type id="a135" category_id="c1" class="R">Return position</alarm_type>
        <alarm_type id="a134" category_id="c1" class="R">Return value</alarm_type>
        <alarm_type id="a133" category_id="c1" class="R">Shift width</alarm_type>
        <alarm_type id="a132" category_id="c1" class="R">Shift width constant</alarm_type>
        <alarm_type id="a139" category_id="c1" class="R">Reserved identifier</alarm_type>
        <alarm_type id="a138" category_id="c1" class="R">Restrict</alarm_type>
        <alarm_type id="a137" category_id="c1" class="R">Return empty</alarm_type>
        <alarm_type id="a136" category_id="c1" class="R">Return implicit</alarm_type>
        <alarm_type id="a143" category_id="c1" class="R">Recursion</alarm_type>
        <alarm_type id="a142" category_id="c1" class="R">Redeclaration</alarm_type>
        <alarm_type id="a141" category_id="c1" class="R">Reserved declaration</alarm_type>
        <alarm_type id="a140" category_id="c1" class="R">Reserved declaration c99</alarm_type>
        <alarm_type id="a179" category_id="c1" class="R">Overlong src line</alarm_type>
        <alarm_type id="a178" category_id="c1" class="R">Parameter assignment</alarm_type>
        <alarm_type id="a177" category_id="c1" class="R">Parameter match</alarm_type>
        <alarm_type id="a176" category_id="c1" class="R">Parameter match computed</alarm_type>
        <alarm_type id="a183" category_id="c1" class="R">Octal escape sequence</alarm_type>
        <alarm_type id="a182" category_id="c1" class="R">Offsetof</alarm_type>
        <alarm_type id="a181" category_id="c1" class="R">Overflow upon dereference</alarm_type>
        <alarm_type id="a180" category_id="c1" class="R">Overlong line</alarm_type>
        <alarm_type id="a187" category_id="c1" class="R">Object pointer diff cast strict</alarm_type>
        <alarm_type id="a186" category_id="c1" class="R">Object pointer diff cast strict implicit</alarm_type>
        <alarm_type id="a185" category_id="c1" class="R">Object type mismatch</alarm_type>
        <alarm_type id="a184" category_id="c1" class="R">Octal constant</alarm_type>
        <alarm_type id="a191" category_id="c1" class="R">Object like macro name min length</alarm_type>
        <alarm_type id="a190" category_id="c1" class="R">Object pointer cast</alarm_type>
        <alarm_type id="a189" category_id="c1" class="R">Object pointer diff cast</alarm_type>
        <alarm_type id="a188" category_id="c1" class="R">Object pointer diff cast implicit</alarm_type>
        <alarm_type id="a163" category_id="c1" class="R">Pointer depth</alarm_type>
        <alarm_type id="a162" category_id="c1" class="R">Pointer integral cast</alarm_type>
        <alarm_type id="a161" category_id="c1" class="R">Pointer integral cast implicit</alarm_type>
        <alarm_type id="a160" category_id="c1" class="R">Pointer qualifier cast const</alarm_type>
        <alarm_type id="a167" category_id="c1" class="R">Pointer cast</alarm_type>
        <alarm_type id="a166" category_id="c1" class="R">Pointer cast alignment</alarm_type>
        <alarm_type id="a165" category_id="c1" class="R">Pointer comparison</alarm_type>
        <alarm_type id="a164" category_id="c1" class="R">Pointer counting</alarm_type>
        <alarm_type id="a171" category_id="c1" class="R">Parameters</alarm_type>
        <alarm_type id="a170" category_id="c1" class="R">Plain char usage</alarm_type>
        <alarm_type id="a169" category_id="c1" class="R">Pointer arithmetic</alarm_type>
        <alarm_type id="a168" category_id="c1" class="R">Pointer attribute</alarm_type>
        <alarm_type id="a175" category_id="c1" class="R">Parameter match type</alarm_type>
        <alarm_type id="a174" category_id="c1" class="R">Parameter missing const</alarm_type>
        <alarm_type id="a173" category_id="c1" class="R">Parameter name</alarm_type>
        <alarm_type id="a172" category_id="c1" class="R">Parameter name match</alarm_type>
        <alarm_type id="a211" category_id="c1" class="R">Missing else strict</alarm_type>
        <alarm_type id="a210" category_id="c1" class="R">Mmline comment</alarm_type>
        <alarm_type id="a209" category_id="c1" class="R">Multi character constant</alarm_type>
        <alarm_type id="a208" category_id="c1" class="R">Multiple atomic accesses</alarm_type>
        <alarm_type id="a215" category_id="c1" class="R">Minimum cyclomatic complexity</alarm_type>
        <alarm_type id="a214" category_id="c1" class="R">Minimum number of instructions</alarm_type>
        <alarm_type id="a213" category_id="c1" class="R">Minimum number of functions calling a function</alarm_type>
        <alarm_type id="a212" category_id="c1" class="R">Missing else</alarm_type>
        <alarm_type id="a219" category_id="c1" class="R">Memcpy overlapping</alarm_type>
        <alarm_type id="a218" category_id="c1" class="R">Memory function compatible</alarm_type>
        <alarm_type id="a217" category_id="c1" class="R">Minimum comment density</alarm_type>
        <alarm_type id="a216" category_id="c1" class="R">Minimum Comment Density - HIS Definition</alarm_type>
        <alarm_type id="a223" category_id="c1" class="R">Memcmp argument types</alarm_type>
        <alarm_type id="a222" category_id="c1" class="R">Memcmp on string</alarm_type>
        <alarm_type id="a221" category_id="c1" class="R">Memcmp with float</alarm_type>
        <alarm_type id="a220" category_id="c1" class="R">Memcmp with padding</alarm_type>
        <alarm_type id="a195" category_id="c1" class="R">Null statement strict</alarm_type>
        <alarm_type id="a194" category_id="c1" class="R">Numeric char usage</alarm_type>
        <alarm_type id="a193" category_id="c1" class="R">Object like macro name</alarm_type>
        <alarm_type id="a192" category_id="c1" class="R">Object like macro name max length</alarm_type>
        <alarm_type id="a199" category_id="c1" class="R">Non standard keyword</alarm_type>
        <alarm_type id="a198" category_id="c1" class="R">Null dereferencing</alarm_type>
        <alarm_type id="a197" category_id="c1" class="R">Null pointer constant</alarm_type>
        <alarm_type id="a196" category_id="c1" class="R">Null statement</alarm_type>
        <alarm_type id="a203" category_id="c1" class="R">No whitespace before postfix</alarm_type>
        <alarm_type id="a202" category_id="c1" class="R">Non directive</alarm_type>
        <alarm_type id="a201" category_id="c1" class="R">Non standard escape sequence</alarm_type>
        <alarm_type id="a200" category_id="c1" class="R">Non standard identifier</alarm_type>
        <alarm_type id="a207" category_id="c1" class="R">Multiple include</alarm_type>
        <alarm_type id="a206" category_id="c1" class="R">Multiple volatile accesses</alarm_type>
        <alarm_type id="a205" category_id="c1" class="R">Namespace overlap</alarm_type>
        <alarm_type id="a204" category_id="c1" class="R">No whitespace after prefix</alarm_type>
        <alarm_type id="a243" category_id="c1" class="R">Maximum number of instructions</alarm_type>
        <alarm_type id="a242" category_id="c1" class="R">Maximum language scope</alarm_type>
        <alarm_type id="a241" category_id="c1" class="R">Max locals</alarm_type>
        <alarm_type id="a240" category_id="c1" class="R">Max logical line length</alarm_type>
        <alarm_type id="a247" category_id="c1" class="R">Max expression nesting</alarm_type>
        <alarm_type id="a246" category_id="c1" class="R">Max externals</alarm_type>
        <alarm_type id="a245" category_id="c1" class="R">Maximum number of goto statements</alarm_type>
        <alarm_type id="a244" category_id="c1" class="R">Max include nesting</alarm_type>
        <alarm_type id="a251" category_id="c1" class="R">Maximum cyclomatic complexity</alarm_type>
        <alarm_type id="a250" category_id="c1" class="R">Max declarator depth</alarm_type>
        <alarm_type id="a249" category_id="c1" class="R">Max declarator nesting</alarm_type>
        <alarm_type id="a248" category_id="c1" class="R">Max enums</alarm_type>
        <alarm_type id="a255" category_id="c1" class="R">Max arguments macro</alarm_type>
        <alarm_type id="a254" category_id="c1" class="R">Max case labels</alarm_type>
        <alarm_type id="a253" category_id="c1" class="R">Max condition nesting</alarm_type>
        <alarm_type id="a252" category_id="c1" class="R">Maxium control nesting depth</alarm_type>
        <alarm_type id="a227" category_id="c1" class="R">Max statement nesting</alarm_type>
        <alarm_type id="a226" category_id="c1" class="R">Max string length</alarm_type>
        <alarm_type id="a225" category_id="c1" class="R">Max struct nesting</alarm_type>
        <alarm_type id="a224" category_id="c1" class="R">Member name reuse</alarm_type>
        <alarm_type id="a231" category_id="c1" class="R">Max parameters macro</alarm_type>
        <alarm_type id="a230" category_id="c1" class="R">Max pointer per file</alarm_type>
        <alarm_type id="a229" category_id="c1" class="R">Max pointer per function</alarm_type>
        <alarm_type id="a228" category_id="c1" class="R">Maximum number of return statements</alarm_type>
        <alarm_type id="a235" category_id="c1" class="R">Maximum number of functions calling a function</alarm_type>
        <alarm_type id="a234" category_id="c1" class="R">Maximum number of execution paths</alarm_type>
        <alarm_type id="a233" category_id="c1" class="R">Maximum number of recursive paths in the call graph</alarm_type>
        <alarm_type id="a232" category_id="c1" class="R">Maximum number of parameters</alarm_type>
        <alarm_type id="a239" category_id="c1" class="R">Max macros defined</alarm_type>
        <alarm_type id="a238" category_id="c1" class="R">Maximum number of maintainable code lines</alarm_type>
        <alarm_type id="a237" category_id="c1" class="R">Max members</alarm_type>
        <alarm_type id="a236" category_id="c1" class="R">Maximum number of called functions</alarm_type>
        <alarm_type id="a275" category_id="c1" class="R">Local object scope</alarm_type>
        <alarm_type id="a274" category_id="c1" class="R">Local static</alarm_type>
        <alarm_type id="a273" category_id="c1" class="R">Logical expression alignment</alarm_type>
        <alarm_type id="a272" category_id="c1" class="R">Logical operators</alarm_type>
        <alarm_type id="a279" category_id="c1" class="R">Literal assignment</alarm_type>
        <alarm_type id="a278" category_id="c1" class="R">Local object name</alarm_type>
        <alarm_type id="a277" category_id="c1" class="R">Local object name max length</alarm_type>
        <alarm_type id="a276" category_id="c1" class="R">Local object name min length</alarm_type>
        <alarm_type id="a283" category_id="c1" class="R">Language override c99</alarm_type>
        <alarm_type id="a282" category_id="c1" class="R">Language undefine</alarm_type>
        <alarm_type id="a281" category_id="c1" class="R">Language undefine c99</alarm_type>
        <alarm_type id="a280" category_id="c1" class="R">Line comment</alarm_type>
        <alarm_type id="a287" category_id="c1" class="R">Keyword override</alarm_type>
        <alarm_type id="a286" category_id="c1" class="R">Label in switch</alarm_type>
        <alarm_type id="a285" category_id="c1" class="R">Label reuse</alarm_type>
        <alarm_type id="a284" category_id="c1" class="R">Language override</alarm_type>
        <alarm_type id="a259" category_id="c1" class="R">Macro parameter unparenthesized expression</alarm_type>
        <alarm_type id="a258" category_id="c1" class="R">Macro undefined</alarm_type>
        <alarm_type id="a257" category_id="c1" class="R">Macro unparenthesized</alarm_type>
        <alarm_type id="a256" category_id="c1" class="R">Malloc size insufficient</alarm_type>
        <alarm_type id="a263" category_id="c1" class="R">Macro identifier length</alarm_type>
        <alarm_type id="a262" category_id="c1" class="R">Macro identifier reuse</alarm_type>
        <alarm_type id="a261" category_id="c1" class="R">Macro parameter match</alarm_type>
        <alarm_type id="a260" category_id="c1" class="R">Macro parameter parentheses</alarm_type>
        <alarm_type id="a267" category_id="c1" class="R">Lvalue cast</alarm_type>
        <alarm_type id="a266" category_id="c1" class="R">Macro argument hash</alarm_type>
        <alarm_type id="a265" category_id="c1" class="R">Macro expansion</alarm_type>
        <alarm_type id="a264" category_id="c1" class="R">Macro function like</alarm_type>
        <alarm_type id="a271" category_id="c1" class="R">Logop primary operand</alarm_type>
        <alarm_type id="a270" category_id="c1" class="R">Logop side effect</alarm_type>
        <alarm_type id="a269" category_id="c1" class="R">Long suffix</alarm_type>
        <alarm_type id="a268" category_id="c1" class="R">Loop termination</alarm_type>
        <alarm_type id="a307" category_id="c1" class="R">Initializer complete</alarm_type>
        <alarm_type id="a306" category_id="c1" class="R">Initializer complete strict</alarm_type>
        <alarm_type id="a305" category_id="c1" class="R">Initializer exists</alarm_type>
        <alarm_type id="a304" category_id="c1" class="R">Initializer multiple</alarm_type>
        <alarm_type id="a311" category_id="c1" class="R">Incompatible argument type</alarm_type>
        <alarm_type id="a310" category_id="c1" class="R">Incompatible types</alarm_type>
        <alarm_type id="a309" category_id="c1" class="R">Indentation level</alarm_type>
        <alarm_type id="a308" category_id="c1" class="R">Infinite loop</alarm_type>
        <alarm_type id="a315" category_id="c1" class="R">Include stdio</alarm_type>
        <alarm_type id="a314" category_id="c1" class="R">Include syntax</alarm_type>
        <alarm_type id="a313" category_id="c1" class="R">Include tgmath</alarm_type>
        <alarm_type id="a312" category_id="c1" class="R">Include time</alarm_type>
        <alarm_type id="a319" category_id="c1" class="R">Include relative</alarm_type>
        <alarm_type id="a318" category_id="c1" class="R">Include setjmp</alarm_type>
        <alarm_type id="a317" category_id="c1" class="R">Include signal</alarm_type>
        <alarm_type id="a316" category_id="c1" class="R">Include stdarg</alarm_type>
        <alarm_type id="a291" category_id="c1" class="R">Invalid pointer init</alarm_type>
        <alarm_type id="a290" category_id="c1" class="R">Invalid pointer return</alarm_type>
        <alarm_type id="a289" category_id="c1" class="R">Invalid usage of os service</alarm_type>
        <alarm_type id="a288" category_id="c1" class="R">Jump in switch</alarm_type>
        <alarm_type id="a295" category_id="c1" class="R">Integral type name extended</alarm_type>
        <alarm_type id="a294" category_id="c1" class="R">Invalid array size</alarm_type>
        <alarm_type id="a293" category_id="c1" class="R">Invalid directive</alarm_type>
        <alarm_type id="a292" category_id="c1" class="R">Invalid free</alarm_type>
        <alarm_type id="a299" category_id="c1" class="R">Int modulo by zero</alarm_type>
        <alarm_type id="a298" category_id="c1" class="R">Integer overflow</alarm_type>
        <alarm_type id="a297" category_id="c1" class="R">Integer suffix</alarm_type>
        <alarm_type id="a296" category_id="c1" class="R">Integral type name</alarm_type>
        <alarm_type id="a303" category_id="c1" class="R">Initializer shape</alarm_type>
        <alarm_type id="a302" category_id="c1" class="R">Inline</alarm_type>
        <alarm_type id="a301" category_id="c1" class="R">Inline static</alarm_type>
        <alarm_type id="a300" category_id="c1" class="R">Int division by zero</alarm_type>
        <alarm_type id="a339" category_id="c1" class="R">Implicit designation</alarm_type>
        <alarm_type id="a338" category_id="c1" class="R">Implicit function declaration</alarm_type>
        <alarm_type id="a337" category_id="c1" class="R">Implicit zero comparison</alarm_type>
        <alarm_type id="a336" category_id="c1" class="R">Inappropriate bool</alarm_type>
        <alarm_type id="a343" category_id="c1" class="R">Identifier unique typedef</alarm_type>
        <alarm_type id="a342" category_id="c1" class="R">If condition lvalue</alarm_type>
        <alarm_type id="a341" category_id="c1" class="R">If value</alarm_type>
        <alarm_type id="a340" category_id="c1" class="R">Ifgroup</alarm_type>
        <alarm_type id="a347" category_id="c1" class="R">Identifier unique</alarm_type>
        <alarm_type id="a346" category_id="c1" class="R">Identifier unique extern</alarm_type>
        <alarm_type id="a345" category_id="c1" class="R">Identifier unique macro</alarm_type>
        <alarm_type id="a344" category_id="c1" class="R">Identifier unique tag</alarm_type>
        <alarm_type id="a351" category_id="c1" class="R">Header definition</alarm_type>
        <alarm_type id="a350" category_id="c1" class="R">Hexadecimal escape sequence</alarm_type>
        <alarm_type id="a349" category_id="c1" class="R">Identifier hidden</alarm_type>
        <alarm_type id="a348" category_id="c1" class="R">Identifier significance</alarm_type>
        <alarm_type id="a323" category_id="c1" class="R">Include file extension</alarm_type>
        <alarm_type id="a322" category_id="c1" class="R">Include next</alarm_type>
        <alarm_type id="a321" category_id="c1" class="R">Include malloc</alarm_type>
        <alarm_type id="a320" category_id="c1" class="R">Include position</alarm_type>
        <alarm_type id="a327" category_id="c1" class="R">Include characters</alarm_type>
        <alarm_type id="a326" category_id="c1" class="R">Include characters backslash</alarm_type>
        <alarm_type id="a325" category_id="c1" class="R">Include characters sline</alarm_type>
        <alarm_type id="a324" category_id="c1" class="R">Include errno</alarm_type>
        <alarm_type id="a331" category_id="c1" class="R">Inappropriate int</alarm_type>
        <alarm_type id="a330" category_id="c1" class="R">Inappropriate pointer cast</alarm_type>
        <alarm_type id="a329" category_id="c1" class="R">Inappropriate pointer cast implicit</alarm_type>
        <alarm_type id="a328" category_id="c1" class="R">Include assert</alarm_type>
        <alarm_type id="a335" category_id="c1" class="R">Inappropriate cast</alarm_type>
        <alarm_type id="a334" category_id="c1" class="R">Inappropriate char</alarm_type>
        <alarm_type id="a333" category_id="c1" class="R">Inappropriate char usage</alarm_type>
        <alarm_type id="a332" category_id="c1" class="R">Inappropriate enum</alarm_type>
        <alarm_type id="a371" category_id="c1" class="R">Function return type</alarm_type>
        <alarm_type id="a370" category_id="c1" class="R">Function return unused</alarm_type>
        <alarm_type id="a369" category_id="c1" class="R">Function type mismatch</alarm_type>
        <alarm_type id="a368" category_id="c1" class="R">Future library use</alarm_type>
        <alarm_type id="a375" category_id="c1" class="R">Function pointer cast</alarm_type>
        <alarm_type id="a374" category_id="c1" class="R">Function pointer integer cast</alarm_type>
        <alarm_type id="a373" category_id="c1" class="R">Function pointer integer cast implicit</alarm_type>
        <alarm_type id="a372" category_id="c1" class="R">Function prototype</alarm_type>
        <alarm_type id="a379" category_id="c1" class="R">Function parameter name</alarm_type>
        <alarm_type id="a378" category_id="c1" class="R">Function parameter name max length</alarm_type>
        <alarm_type id="a377" category_id="c1" class="R">Function parameter name min length</alarm_type>
        <alarm_type id="a376" category_id="c1" class="R">Function pointer</alarm_type>
        <alarm_type id="a383" category_id="c1" class="R">Function like macro name min length</alarm_type>
        <alarm_type id="a382" category_id="c1" class="R">Function local declarator</alarm_type>
        <alarm_type id="a381" category_id="c1" class="R">Function name length</alarm_type>
        <alarm_type id="a380" category_id="c1" class="R">Function name usage</alarm_type>
        <alarm_type id="a355" category_id="c1" class="R">Has include next</alarm_type>
        <alarm_type id="a354" category_id="c1" class="R">Hash macro</alarm_type>
        <alarm_type id="a353" category_id="c1" class="R">Hash macro multiple</alarm_type>
        <alarm_type id="a352" category_id="c1" class="R">Hash macro order</alarm_type>
        <alarm_type id="a359" category_id="c1" class="R">Global variable</alarm_type>
        <alarm_type id="a358" category_id="c1" class="R">Goto</alarm_type>
        <alarm_type id="a357" category_id="c1" class="R">Goto nesting</alarm_type>
        <alarm_type id="a356" category_id="c1" class="R">Has include</alarm_type>
        <alarm_type id="a363" category_id="c1" class="R">Global object name</alarm_type>
        <alarm_type id="a362" category_id="c1" class="R">Global object name max length</alarm_type>
        <alarm_type id="a361" category_id="c1" class="R">Global object name min length</alarm_type>
        <alarm_type id="a360" category_id="c1" class="R">Global object scope</alarm_type>
        <alarm_type id="a367" category_id="c1" class="R">Generic selection side effect</alarm_type>
        <alarm_type id="a366" category_id="c1" class="R">Global function name</alarm_type>
        <alarm_type id="a365" category_id="c1" class="R">Global function name max length</alarm_type>
        <alarm_type id="a364" category_id="c1" class="R">Global function name min length</alarm_type>
        <alarm_type id="a403" category_id="c1" class="R">Extra tokens</alarm_type>
        <alarm_type id="a402" category_id="c1" class="R">Field overflow upon dereference</alarm_type>
        <alarm_type id="a401" category_id="c1" class="R">File dereference</alarm_type>
        <alarm_type id="a400" category_id="c1" class="R">Filename</alarm_type>
        <alarm_type id="a407" category_id="c1" class="R">Extern function declaration</alarm_type>
        <alarm_type id="a406" category_id="c1" class="R">Extern object declaration</alarm_type>
        <alarm_type id="a405" category_id="c1" class="R">External file spreading</alarm_type>
        <alarm_type id="a404" category_id="c1" class="R">External redeclaration</alarm_type>
        <alarm_type id="a411" category_id="c1" class="R">Expanded hash parameter</alarm_type>
        <alarm_type id="a410" category_id="c1" class="R">Explicit cast overflow</alarm_type>
        <alarm_type id="a409" category_id="c1" class="R">Expression statement dead</alarm_type>
        <alarm_type id="a408" category_id="c1" class="R">Extern</alarm_type>
        <alarm_type id="a415" category_id="c1" class="R">Essentially boolean switch</alarm_type>
        <alarm_type id="a414" category_id="c1" class="R">Evaluation order</alarm_type>
        <alarm_type id="a413" category_id="c1" class="R">Evaluation order initializer</alarm_type>
        <alarm_type id="a412" category_id="c1" class="R">Excessive interval</alarm_type>
        <alarm_type id="a387" category_id="c1" class="R">Function body size</alarm_type>
        <alarm_type id="a386" category_id="c1" class="R">Function ellipsis</alarm_type>
        <alarm_type id="a385" category_id="c1" class="R">Function like macro name</alarm_type>
        <alarm_type id="a384" category_id="c1" class="R">Function like macro name max length</alarm_type>
        <alarm_type id="a391" category_id="c1" class="R">For loop expression type</alarm_type>
        <alarm_type id="a390" category_id="c1" class="R">For loop float</alarm_type>
        <alarm_type id="a389" category_id="c1" class="R">Forward declared enum</alarm_type>
        <alarm_type id="a388" category_id="c1" class="R">Function body order</alarm_type>
        <alarm_type id="a395" category_id="c1" class="R">Float division by zero</alarm_type>
        <alarm_type id="a394" category_id="c1" class="R">Floating point loop counter</alarm_type>
        <alarm_type id="a393" category_id="c1" class="R">For loop condition sideeffect</alarm_type>
        <alarm_type id="a392" category_id="c1" class="R">For loop control</alarm_type>
        <alarm_type id="a399" category_id="c1" class="R">Flexible array member assignment</alarm_type>
        <alarm_type id="a398" category_id="c1" class="R">Flexible array member declaration</alarm_type>
        <alarm_type id="a397" category_id="c1" class="R">Float bits from pointer</alarm_type>
        <alarm_type id="a396" category_id="c1" class="R">Float comparison</alarm_type>
        <alarm_type id="a435" category_id="c1" class="R">Double lvalue assignment</alarm_type>
        <alarm_type id="a434" category_id="c1" class="R">Else if</alarm_type>
        <alarm_type id="a433" category_id="c1" class="R">Empty parameter list</alarm_type>
        <alarm_type id="a432" category_id="c1" class="R">Enum</alarm_type>
        <alarm_type id="a439" category_id="c1" class="R">Distinct member</alarm_type>
        <alarm_type id="a438" category_id="c1" class="R">Distinct ordinary</alarm_type>
        <alarm_type id="a437" category_id="c1" class="R">Distinct tags</alarm_type>
        <alarm_type id="a436" category_id="c1" class="R">Double dereference</alarm_type>
        <alarm_type id="a443" category_id="c1" class="R">Distinct identifiers macros</alarm_type>
        <alarm_type id="a442" category_id="c1" class="R">Distinct label</alarm_type>
        <alarm_type id="a441" category_id="c1" class="R">Distinct macro</alarm_type>
        <alarm_type id="a440" category_id="c1" class="R">Distinct macro parameter</alarm_type>
        <alarm_type id="a447" category_id="c1" class="R">Digraph</alarm_type>
        <alarm_type id="a446" category_id="c1" class="R">Directive syntax</alarm_type>
        <alarm_type id="a445" category_id="c1" class="R">Distinct extern</alarm_type>
        <alarm_type id="a444" category_id="c1" class="R">Distinct identifier hidden</alarm_type>
        <alarm_type id="a419" category_id="c1" class="R">Essential arithmetic conversion</alarm_type>
        <alarm_type id="a418" category_id="c1" class="R">Essential shift width</alarm_type>
        <alarm_type id="a417" category_id="c1" class="R">Essential shift width constant</alarm_type>
        <alarm_type id="a416" category_id="c1" class="R">Essential type assign</alarm_type>
        <alarm_type id="a423" category_id="c1" class="R">Errno reset</alarm_type>
        <alarm_type id="a422" category_id="c1" class="R">Error information unused</alarm_type>
        <alarm_type id="a421" category_id="c1" class="R">Error information unused computed</alarm_type>
        <alarm_type id="a420" category_id="c1" class="R">Escape termination</alarm_type>
        <alarm_type id="a427" category_id="c1" class="R">Enum tag spelling</alarm_type>
        <alarm_type id="a426" category_id="c1" class="R">Enumeration constant name</alarm_type>
        <alarm_type id="a425" category_id="c1" class="R">Enumeration constant name max length</alarm_type>
        <alarm_type id="a424" category_id="c1" class="R">Enumeration constant name min length</alarm_type>
        <alarm_type id="a431" category_id="c1" class="R">Enum definition</alarm_type>
        <alarm_type id="a430" category_id="c1" class="R">Enum implicit value</alarm_type>
        <alarm_type id="a429" category_id="c1" class="R">Enum tag max length</alarm_type>
        <alarm_type id="a428" category_id="c1" class="R">Enum tag min length</alarm_type>
        <alarm_type id="a467" category_id="c1" class="R">Compound ifelse</alarm_type>
        <alarm_type id="a466" category_id="c1" class="R">Compound indentation</alarm_type>
        <alarm_type id="a465" category_id="c1" class="R">Compound loop</alarm_type>
        <alarm_type id="a464" category_id="c1" class="R">Compound switch</alarm_type>
        <alarm_type id="a471" category_id="c1" class="R">Composite cast</alarm_type>
        <alarm_type id="a470" category_id="c1" class="R">Composite type width</alarm_type>
        <alarm_type id="a469" category_id="c1" class="R">Compound alignment</alarm_type>
        <alarm_type id="a468" category_id="c1" class="R">Compound brace alignment</alarm_type>
        <alarm_type id="a475" category_id="c1" class="R">Char sign conversion</alarm_type>
        <alarm_type id="a474" category_id="c1" class="R">Character set</alarm_type>
        <alarm_type id="a473" category_id="c1" class="R">Comma operator</alarm_type>
        <alarm_type id="a472" category_id="c1" class="R">Composite assign</alarm_type>
        <alarm_type id="a479" category_id="c1" class="R">Cast pointer incomplete</alarm_type>
        <alarm_type id="a478" category_id="c1" class="R">Cast pointer void</alarm_type>
        <alarm_type id="a477" category_id="c1" class="R">Cast pointer void arithmetic</alarm_type>
        <alarm_type id="a476" category_id="c1" class="R">Cast pointer void arithmetic implicit</alarm_type>
        <alarm_type id="a451" category_id="c1" class="R">Defined</alarm_type>
        <alarm_type id="a450" category_id="c1" class="R">Defined generation</alarm_type>
        <alarm_type id="a449" category_id="c1" class="R">Defined usage</alarm_type>
        <alarm_type id="a448" category_id="c1" class="R">Definition duplicate</alarm_type>
        <alarm_type id="a455" category_id="c1" class="R">Counter manipulation</alarm_type>
        <alarm_type id="a454" category_id="c1" class="R">Ctype limits</alarm_type>
        <alarm_type id="a453" category_id="c1" class="R">Dangling elsegroup</alarm_type>
        <alarm_type id="a452" category_id="c1" class="R">Define in block</alarm_type>
        <alarm_type id="a459" category_id="c1" class="R">Constant expression wrap around</alarm_type>
        <alarm_type id="a458" category_id="c1" class="R">Continue</alarm_type>
        <alarm_type id="a457" category_id="c1" class="R">Controlling invariant</alarm_type>
        <alarm_type id="a456" category_id="c1" class="R">Controlling invariant expression</alarm_type>
        <alarm_type id="a463" category_id="c1" class="R">Conditional</alarm_type>
        <alarm_type id="a462" category_id="c1" class="R">Conditional macro</alarm_type>
        <alarm_type id="a461" category_id="c1" class="R">Const parameter</alarm_type>
        <alarm_type id="a460" category_id="c1" class="R">Constant expression extended</alarm_type>
        <alarm_type id="a499" category_id="c1" class="R">Bitfield name max length</alarm_type>
        <alarm_type id="a498" category_id="c1" class="R">Bitfield name min length</alarm_type>
        <alarm_type id="a497" category_id="c1" class="R">Bitfield signed size</alarm_type>
        <alarm_type id="a496" category_id="c1" class="R">Bitfield type</alarm_type>
        <alarm_type id="a503" category_id="c1" class="R">Backjump</alarm_type>
        <alarm_type id="a502" category_id="c1" class="R">Binary constant</alarm_type>
        <alarm_type id="a501" category_id="c1" class="R">Bitfield</alarm_type>
        <alarm_type id="a500" category_id="c1" class="R">Bitfield name</alarm_type>
        <alarm_type id="a507" category_id="c1" class="R">Assignment overlapping</alarm_type>
        <alarm_type id="a506" category_id="c1" class="R">Assignment to non modifiable lvalue</alarm_type>
        <alarm_type id="a505" category_id="c1" class="R">At location</alarm_type>
        <alarm_type id="a504" category_id="c1" class="R">Attribute</alarm_type>
        <alarm_type id="a511" category_id="c1" class="R">Assembler</alarm_type>
        <alarm_type id="a510" category_id="c1" class="R">Assignment</alarm_type>
        <alarm_type id="a509" category_id="c1" class="R">Assignment boolean</alarm_type>
        <alarm_type id="a508" category_id="c1" class="R">Assignment conditional</alarm_type>
        <alarm_type id="a483" category_id="c1" class="R">Cast float implicit</alarm_type>
        <alarm_type id="a482" category_id="c1" class="R">Cast implicit</alarm_type>
        <alarm_type id="a481" category_id="c1" class="R">Cast integer</alarm_type>
        <alarm_type id="a480" category_id="c1" class="R">Cast integer implicit</alarm_type>
        <alarm_type id="a487" category_id="c1" class="R">Break in loop</alarm_type>
        <alarm_type id="a486" category_id="c1" class="R">Breaks in loop</alarm_type>
        <alarm_type id="a485" category_id="c1" class="R">Case clause</alarm_type>
        <alarm_type id="a484" category_id="c1" class="R">Cast float</alarm_type>
        <alarm_type id="a491" category_id="c1" class="R">Boolean invariant</alarm_type>
        <alarm_type id="a490" category_id="c1" class="R">Boolean invariant expression</alarm_type>
        <alarm_type id="a489" category_id="c1" class="R">Boolean operation</alarm_type>
        <alarm_type id="a488" category_id="c1" class="R">Boolean switch</alarm_type>
        <alarm_type id="a495" category_id="c1" class="R">Bitfield typing</alarm_type>
        <alarm_type id="a494" category_id="c1" class="R">Bitop recast</alarm_type>
        <alarm_type id="a493" category_id="c1" class="R">Bitop type</alarm_type>
        <alarm_type id="a492" category_id="c1" class="R">Boolean control</alarm_type>
        <alarm_type id="a515" category_id="c1" class="R">Array size</alarm_type>
        <alarm_type id="a514" category_id="c1" class="R">Array size designator</alarm_type>
        <alarm_type id="a513" category_id="c1" class="R">Array size external</alarm_type>
        <alarm_type id="a512" category_id="c1" class="R">Array size global</alarm_type>
        <alarm_type id="a519" category_id="c1" class="R">Array index range</alarm_type>
        <alarm_type id="a518" category_id="c1" class="R">Initializer excess</alarm_type>
        <alarm_type id="a517" category_id="c1" class="R">Array initialization</alarm_type>
        <alarm_type id="a516" category_id="c1" class="R">Array parameter static size</alarm_type>
        <alarm_type id="a523" category_id="c1" class="R">Alignof side effect</alarm_type>
        <alarm_type id="a522" category_id="c1" class="R">Analysis run</alarm_type>
        <alarm_type id="a521" category_id="c1" class="R">Array index</alarm_type>
        <alarm_type id="a520" category_id="c1" class="R">Array index range constant</alarm_type>
        <alarm_type id="a524" category_id="c1" class="R">Alignof void</alarm_type>
        <alarm_type id="a1" category_id="c11" class="E">Other</alarm_type>
        <alarm_type id="a535" category_id="c11" class="E">Deprecated syntax</alarm_type>
        <alarm_type id="a534" category_id="c11" class="E">Unsupported switch</alarm_type>
        <alarm_type id="a539" category_id="c11" class="E">Ignored directive</alarm_type>
        <alarm_type id="a538" category_id="c11" class="E">Invalid conversion</alarm_type>
        <alarm_type id="a537" category_id="c11" class="E">Parsing</alarm_type>
        <alarm_type id="a536" category_id="c11" class="E">Preprocessing</alarm_type>
        <alarm_type id="a542" category_id="c11" class="E">Definite runtime error</alarm_type>
        <alarm_type id="a541" category_id="c11" class="E">Analysis stopped</alarm_type>
        <alarm_type id="a540" category_id="c11" class="E">Annotation</alarm_type>
        <alarm_type id="a2" category_id="c12" class="N">Other</alarm_type>
        <alarm_type id="a531" category_id="c12" class="N">Constant expression</alarm_type>
        <alarm_type id="a530" category_id="c12" class="N">Incompatible types</alarm_type>
        <alarm_type id="a529" category_id="c12" class="N">Incomplete type</alarm_type>
        <alarm_type id="a528" category_id="c12" class="N">Inefficiency</alarm_type>
        <alarm_type id="a533" category_id="c12" class="N">Annotation</alarm_type>
        <alarm_type id="a532" category_id="c12" class="N">Control flow</alarm_type>
        <alarm_type id="a527" category_id="c12" class="N">Invalid conversion</alarm_type>
        <alarm_type id="a526" category_id="c12" class="N">Ambiguity due to side effects</alarm_type>
        <alarm_type id="a525" category_id="c12" class="N">Volatile</alarm_type>
        <alarm_type id="a587" category_id="c13" class="E">Unknown error</alarm_type>
        <alarm_type id="a577" category_id="c14" class="A">Dereference of null or invalid pointer</alarm_type>
        <alarm_type id="a576" category_id="c14" class="A">Possible overflow upon dereference</alarm_type>
        <alarm_type id="a583" category_id="c14" class="A">Arithmetics on invalid pointers</alarm_type>
        <alarm_type id="a586" category_id="c14" class="C">Invalid pointer comparison</alarm_type>
        <alarm_type id="a584" category_id="c14" class="A">Subtraction of invalid pointers</alarm_type>
        <alarm_type id="a561" category_id="c14" class="A">Out-of-bound array access</alarm_type>
        <alarm_type id="a575" category_id="c14" class="C">Incorrect field dereference</alarm_type>
        <alarm_type id="a574" category_id="c14" class="A">Dereference of mis-aligned pointer</alarm_type>
        <alarm_type id="a572" category_id="c14" class="A">Pointer to invalid or null function</alarm_type>
        <alarm_type id="a550" category_id="c14" class="A">Attempt to write to a constant</alarm_type>
        <alarm_type id="a548" category_id="c14" class="A">Invalid argument in dynamic memory allocation, free or resize</alarm_type>
        <alarm_type id="a554" category_id="c14" class="A">Use of dangling pointer</alarm_type>
        <alarm_type id="a557" category_id="c15" class="C">Constant out of range</alarm_type>
        <alarm_type id="a582" category_id="c15" class="A">Float argument can be NaN or infinity</alarm_type>
        <alarm_type id="a7" category_id="c15" class="C">Overflow in arithmetic</alarm_type>
        <alarm_type id="a6" category_id="c15" class="C">Overflow in conversion</alarm_type>
        <alarm_type id="a5" category_id="c15" class="A">Overflow in conversion (with unpredictable result)</alarm_type>
        <alarm_type id="a562" category_id="c15" class="C">Offset range overflow</alarm_type>
        <alarm_type id="a559" category_id="c16" class="C">Wrong range of second shift argument</alarm_type>
        <alarm_type id="a558" category_id="c16" class="A">Wrong range of first shift argument</alarm_type>
        <alarm_type id="a579" category_id="c17" class="C">Undefined integer modulo</alarm_type>
        <alarm_type id="a578" category_id="c17" class="A">Float division by zero</alarm_type>
        <alarm_type id="a581" category_id="c17" class="A">Integer division by zero</alarm_type>
        <alarm_type id="a580" category_id="c17" class="A">Integer modulo by zero</alarm_type>
        <alarm_type id="a543" category_id="c18" class="C">User defined alarm</alarm_type>
        <alarm_type id="a560" category_id="c18" class="A">Square root of negative number</alarm_type>
        <alarm_type id="a570" category_id="c18" class="A">Assertion failure</alarm_type>
        <alarm_type id="a569" category_id="c18" class="C">Check failure</alarm_type>
        <alarm_type id="a573" category_id="c18" class="A">Invalid memcpy/bzero/access/trash</alarm_type>
        <alarm_type id="a544" category_id="c18" class="C">Invalid interval</alarm_type>
        <alarm_type id="a556" category_id="c19" class="A">Stub invocation</alarm_type>
        <alarm_type id="a563" category_id="c19" class="A">Incompatible function return type</alarm_type>
        <alarm_type id="a567" category_id="c19" class="A">Function with unnamed arguments</alarm_type>
        <alarm_type id="a566" category_id="c19" class="C">Reinterpreting incompatible parameter type in a function call</alarm_type>
        <alarm_type id="a565" category_id="c19" class="A">Incompatible parameter type in a function call</alarm_type>
        <alarm_type id="a564" category_id="c19" class="C">Reinterpreting incompatible function return type</alarm_type>
        <alarm_type id="a571" category_id="c19" class="A">Recursive function call</alarm_type>
        <alarm_type id="a568" category_id="c19" class="A">Function call with wrong number of arguments</alarm_type>
        <alarm_type id="a555" category_id="c20" class="A">Use of uninitialized variables</alarm_type>
        <alarm_type id="a551" category_id="c21" class="D">Infinite loop</alarm_type>
        <alarm_type id="a549" category_id="c21" class="D">Taint sink</alarm_type>
        <alarm_type id="a553" category_id="c21" class="D">Reading global/static variable without explicit initializer or prior assignment</alarm_type>
        <alarm_type id="a552" category_id="c21" class="D">Write after write</alarm_type>
        <alarm_type id="a3" category_id="c22" class="B">Write/write data race</alarm_type>
        <alarm_type id="a4" category_id="c22" class="B">Read/write data race</alarm_type>
        <alarm_type id="a547" category_id="c22" class="A">Invalid usage of concurrency intrinsic</alarm_type>
        <alarm_type id="a546" category_id="c22" class="A">Invalid usage of OS service</alarm_type>
        <alarm_type id="a545" category_id="c22" class="D">Deadlock</alarm_type>
    </alarm_types>
    <rule_descriptions>
        <rule_description name="M2012.21.10">The Standard Library time and date functions shall not be used.</rule_description>
        <rule_description name="M2012.21.11">The standard header file &lt;tgmath.h&gt; shall not be used.</rule_description>
        <rule_description name="M2012.9.2">The initializer for an aggregate or union shall be enclosed in braces.</rule_description>
        <rule_description name="M2012.9.3">Arrays shall not be partially initialized.</rule_description>
        <rule_description name="M2012.9.4">An element of an object shall not be initialized more than once.</rule_description>
        <rule_description name="M2012.9.5">Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly.</rule_description>
        <rule_description name="M2012.18.2">Subtraction between pointers shall only be applied to pointers that address elements of the same array.</rule_description>
        <rule_description name="M2012.20.2">The ', &quot; or \ characters and the /* or // character sequences shall not occur in a header file name.</rule_description>
        <rule_description name="M2012.18.3">The relational operators &gt;, &gt;=, &lt; and &lt;= shall not be applied to objects of pointer type except where they point into the same object.</rule_description>
        <rule_description name="M2012.20.3">The #include directive shall be followed by either a &lt;filename&gt; or &quot;filename&quot; sequence.</rule_description>
        <rule_description name="M2012.20.4">A macro shall not be defined with the same name as a keyword.</rule_description>
        <rule_description name="M2012.18.6">The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist.</rule_description>
        <rule_description name="M2012.20.6">Tokens that look like a preprocessing directive shall not occur within a macro argument.</rule_description>
        <rule_description name="M2012.5.1">External identifiers shall be distinct.</rule_description>
        <rule_description name="M2012.20.11">A macro parameter immediately following a # operator shall not immediately be followed by a ## operator.</rule_description>
        <rule_description name="M2012.5.2">Identifiers declared in the same scope and name space shall be distinct.</rule_description>
        <rule_description name="M2012.18.8">Variable-length array types shall not be used.</rule_description>
        <rule_description name="M2012.20.8">The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1.</rule_description>
        <rule_description name="M2012.5.3">An identifier declared in an inner scope shall not hide an identifier declared in an outer scope.</rule_description>
        <rule_description name="M2012.20.13">A line whose first token is # shall be a valid preprocessing directive.</rule_description>
        <rule_description name="M2012.20.9">All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation.</rule_description>
        <rule_description name="M2012.5.4">Macro identifiers shall be distinct.</rule_description>
        <rule_description name="M2012.20.14">All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related.</rule_description>
        <rule_description name="M2012.5.5">Identifiers shall be distinct from macro names.</rule_description>
        <rule_description name="M2012.14.1">A loop counter shall not have essentially floating type.</rule_description>
        <rule_description name="M2012.5.6">A typedef name shall be a unique identifier.</rule_description>
        <rule_description name="M2012.14.2">A for loop shall be well-formed.</rule_description>
        <rule_description name="M2012.5.7">A tag name shall be a unique identifier.</rule_description>
        <rule_description name="M2012.14.3">Controlling expressions shall not be invariant.</rule_description>
        <rule_description name="M2012.5.8">Identifiers that define objects or functions with external linkage shall be unique.</rule_description>
        <rule_description name="M2012.14.4">The controlling expression of an if statement and the controlling expression of an iteration- statement shall have essentially Boolean type.</rule_description>
        <rule_description name="M2012.10.1">Operands shall not be of an inappropriate essential type.</rule_description>
        <rule_description name="M2012.10.2">Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations.</rule_description>
        <rule_description name="M2012.10.3">The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.</rule_description>
        <rule_description name="M2012.10.4">Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category.</rule_description>
        <rule_description name="M2012.10.6">The value of a composite expression shall not be assigned to an object with wider essential type.</rule_description>
        <rule_description name="M2012.10.7">If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type.</rule_description>
        <rule_description name="M2012.10.8">The value of a composite expression shall not be cast to a different essential type category or a wider essential type.</rule_description>
        <rule_description name="A.3.1">No cast shall be performed between pointer types and integer types. (ISO/IEC 9899:1999 6.3.2.3p5+6)</rule_description>
        <rule_description name="A.3.2">The value of an integer character constant containing more than one character is implementation-defined. (ISO/IEC 9899:1999 6.4.4.4p10)</rule_description>
        <rule_description name="A.3.3">A bit-field shall have a type _Bool, signed int, unsigned int, or some other implementation-defined type. (ISO/IEC 9899:1999 6.7.2.1)</rule_description>
        <rule_description name="M2012.8.1">Types shall be explicitly specified.</rule_description>
        <rule_description name="M2012.8.2">Function types shall be in prototype form with named parameters.</rule_description>
        <rule_description name="M2012.8.3">All declarations of an object or function shall use the same names and type qualifiers.</rule_description>
        <rule_description name="M2012.8.4">A compatible declaration shall be visible when an object or function with external linkage is defined.</rule_description>
        <rule_description name="M2012.8.5">An external object or function shall be declared once in one and only one file.</rule_description>
        <rule_description name="M2012.17.1">The features of &lt;stdarg.h&gt; shall not be used.</rule_description>
        <rule_description name="M2012.8.6">An identifier with external linkage shall have exactly one external definition.</rule_description>
        <rule_description name="M2012.17.2">Functions shall not call themselves, either directly or indirectly.</rule_description>
        <rule_description name="M2012.17.3">A function shall not be declared implicitly.</rule_description>
        <rule_description name="M2012.8.8">The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage.</rule_description>
        <rule_description name="M2012.17.4">All exit paths from a function with non-void return type shall have an explicit return statement with an expression.</rule_description>
        <rule_description name="M2012.17.6">The declaration of an array parameter shall not contain the static keyword between the [].</rule_description>
        <rule_description name="M2012.4.1">Octal and hexadecimal escape sequences shall be terminated.</rule_description>
        <rule_description name="M2012.17.7">The value returned by a function having non-void return type shall be used.</rule_description>
        <rule_description name="M2012.17.8">A function parameter shall not be modified.</rule_description>
        <rule_description name="M2012.13.1">Initializer lists shall not contain persistent side effects.</rule_description>
        <rule_description name="M2012.13.2">The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders.</rule_description>
        <rule_description name="M2012.13.5">The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects.</rule_description>
        <rule_description name="M2012.13.6">The operand of the sizeof operator shall not contain any expression which has potential side effects.</rule_description>
        <rule_description name="A.2.1">Implicit function declaration shall not be used. (ISO/IEC 9899:1999 6.5.1p2)</rule_description>
        <rule_description name="A.2.2">Assembler code shall be avoided. (ISO/IEC 9899:1999 4p5)</rule_description>
        <rule_description name="A.2.3">Data placement at an absolute location shall be avoided. (ISO/IEC 9899:1999 4p5)</rule_description>
        <rule_description name="A.2.4">Only integer constant expressions stricly conforming to the C standard shall be used. (ISO/IEC 9899:1999 6.6p10)</rule_description>
        <rule_description name="A.2.5">Enums shall not be forward-declared, i.e. used as complete type before being defined. (ISO/IEC 9899:1999 4p5)</rule_description>
        <rule_description name="M2012.8.10">An inline function shall be declared with the static storage class.</rule_description>
        <rule_description name="A.2.6">Lvalue casts shall be avoided. (ISO/IEC 9899:1999 4p5)</rule_description>
        <rule_description name="A.2.7">Non-standard keywords shall not be used. (ISO/IEC 9899:1999 4p5)</rule_description>
        <rule_description name="M2012.8.12">Within a n enumerator list, the value of an implicitly-specified enumeration constant shall be unique.</rule_description>
        <rule_description name="A.2.8">Pointer attributes shall be avoided. (ISO/IEC 9899:1999 4p5)</rule_description>
        <rule_description name="A.2.9">GCC's statement expressions shall not be used. (ISO/IEC 9899:1999 4p5)</rule_description>
        <rule_description name="M2012.8.14">The restrict type qualifier shall not be used.</rule_description>
        <rule_description name="M2012.22.2">A block of memory shall only be freed if it was allocated by means of a Standard Library function.</rule_description>
        <rule_description name="M2012.22.5">A pointer to a FILE object shall not be dereferenced.</rule_description>
        <rule_description name="M2012.7.1">Octal constants shall not be used.</rule_description>
        <rule_description name="M2012.7.2">A &quot;u&quot; or &quot;U&quot; suffix shall be applied to all integer constants that are represented in an unsigned type.</rule_description>
        <rule_description name="M2012.7.3">The lowercase character &quot;l&quot; shall not be used in a literal suffix.</rule_description>
        <rule_description name="M2012.7.4">A string literal shall not be assigned to an object unless the object's type is &quot;pointer to const-qualified char&quot;.</rule_description>
        <rule_description name="M2012.16.1">All switch statements shall be well-formed.</rule_description>
        <rule_description name="M2012.16.2">A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement.</rule_description>
        <rule_description name="M2012.16.3">An unconditional break statement shall terminate every switch-clause.</rule_description>
        <rule_description name="M2012.16.4">Every switch statement shall have a default label.</rule_description>
        <rule_description name="M2012.16.5">A default label shall appear as either the first or the last switch label of a switch statement.</rule_description>
        <rule_description name="M2012.16.6">Every switch statement shall have at least two switch-clauses.</rule_description>
        <rule_description name="M2012.16.7">A switch-expression shall not have essentially Boolean type.</rule_description>
        <rule_description name="M2012.3.1">The character sequences /* and // shall not be used within a comment.</rule_description>
        <rule_description name="M2012.3.2">Line-splicing shall not be used in // comments.</rule_description>
        <rule_description name="A.2.10">GCC's binary constants shall not be used. (ISO/IEC 9899:1999 4p5)</rule_description>
        <rule_description name="M2012.12.2">The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand.</rule_description>
        <rule_description name="A.2.11">Non-standard escape sequences shall not be used. (ISO/IEC 9899:1999 6.4.4.4)</rule_description>
        <rule_description name="A.2.12">Identifiers containing characters not provided for by the C standard shall not be used. (ISO/IEC 9899:1999 6.4.2.1)</rule_description>
        <rule_description name="M2012.D.4.10">Precautions shall be taken in order to prevent the contents of a header file being included more than once.</rule_description>
        <rule_description name="A.2.13">The sizeof and _Alignof operator shall not be applied to type void. (ISO/IEC 9899:2011 6.5.3.4p1)</rule_description>
        <rule_description name="M2012.D.4.11">The validity of values passed to library functions shall be checked.</rule_description>
        <rule_description name="A.2.14">GCC's #include_next directive shall not be used. (ISO/IEC 9899:1999 4p5)</rule_description>
        <rule_description name="M2012.D.4.12">Dynamic memory allocation shall not be used.</rule_description>
        <rule_description name="A.2.15">The include file checking macros __has_include and __has_include_next shall not be used. (ISO/IEC 9899:1999 4p5)</rule_description>
        <rule_description name="A.2.16">__attribute__((...)) shall not be used. (ISO/IEC 9899:1999 4p5)</rule_description>
        <rule_description name="A.5.1">Directives are required to follow the syntax and constraints specified in the manual.</rule_description>
        <rule_description name="A.5.2">Language features not supported by Astree that are discarded by the frontend should be avoided.</rule_description>
        <rule_description name="A.5.3">Language features not supported by Astree should be avoided.</rule_description>
        <rule_description name="A.1.1">Two declarations that declare the same entity must be of compatible type. (ISO/IEC 9899:1999 6.2.7p2)</rule_description>
        <rule_description name="A.1.2">If the size expression of an array declarator is constant, it shall have a value greater than zero. (ISO/IEC 9899:1999 6.7.5.2p1)</rule_description>
        <rule_description name="A.1.3">At least one type specifier shall be given in a declaration. (ISO/IEC 9899:1999 6.7.2p2)</rule_description>
        <rule_description name="A.1.10">Every parameter identifier in a function definition with identifier-list shall be declared. (ISO/IEC 9899:1999 6.9.1p6)</rule_description>
        <rule_description name="A.1.4">No implicit conversion shall be performed between pointer types and integer types. (ISO/IEC 9899:1999 6.5.4p3)</rule_description>
        <rule_description name="A.1.5">The number of arguments shall agree with the number of parameters. (ISO/IEC 9899:1999 6.5.2.2p2)</rule_description>
        <rule_description name="A.1.6">The constant expression of a static assert shall compare unequal to zero. (ISO/IEC 9899:2011 6.7.10p2)</rule_description>
        <rule_description name="A.1.7">The lvalue of a unary or binary assignment operator shall be a modifiable lvalue. (ISO/IEC 9899:1999 6.5.16p2)</rule_description>
        <rule_description name="A.1.8">No initializer shall attempt to provide a value for an object not contained within the entity being initialized. (ISO/IEC 9899:1999 6.7.8p2)</rule_description>
        <rule_description name="M2012.D.4.1">Run-time failures shall be minimized.</rule_description>
        <rule_description name="A.1.9">If an identifier has no linkage, there shall be no more than one declaration of the identifier with the same scope and in the same name space, except for tags. (ISO/IEC 9899:1999 6.7p3)</rule_description>
        <rule_description name="M2012.D.4.7">If a function returns error information, then that error information shall be tested.</rule_description>
        <rule_description name="M2012.21.1">#define and #undef shall not be used on a reserved identifier or reserved macro name.</rule_description>
        <rule_description name="M2012.21.2">A reserved identifier or macro name shall not be declared.</rule_description>
        <rule_description name="M2012.21.3">The memory allocation and deallocation functions of &lt;stdlib.h&gt; shall not be used.</rule_description>
        <rule_description name="M2012.21.4">The standard header file &lt;setjmp.h&gt; shall not be used.</rule_description>
        <rule_description name="M2012.21.5">The standard header file &lt;signal.h&gt; shall not be used.</rule_description>
        <rule_description name="M2012.21.6">The Standard Library input/output functions shall not be used.</rule_description>
        <rule_description name="M2012.6.1">Bit-fields shall only be declared with an appropriate type.</rule_description>
        <rule_description name="M2012.21.7">The atof, atoi, atol and atoll functions of &lt;stdlib.h&gt; shall not be used.</rule_description>
        <rule_description name="M2012.6.2">Single-bit named bit fields shall not be of a signed type.</rule_description>
        <rule_description name="M2012.21.8">The standard library functions abort, exit, getenv and system of &lt;stdlib.h&gt; shall not be used. For Misra C:2012 Amendment 1 use M2012A1.21.8.</rule_description>
        <rule_description name="M2012.21.9">The standard library functions bsearch and qsort of &lt;stdlib.h&gt; shall not be used.</rule_description>
        <rule_description name="M2012.15.2">The goto statement shall jump to a label declared later in the same function.</rule_description>
        <rule_description name="M2012.15.3">Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement.</rule_description>
        <rule_description name="M2012.15.6">The body of an iteration-statement or a selection-statement shall be a compound-statement.</rule_description>
        <rule_description name="M2012.2.1">A project shall not contain unreachable code.</rule_description>
        <rule_description name="M2012.15.7">All if ... else if constructs shall be terminated with an else statement.</rule_description>
        <rule_description name="M2012.2.2">There shall be no dead code.</rule_description>
        <rule_description name="M2012.11.1">Conversions shall not be performed between a pointer to a function and any other type.</rule_description>
        <rule_description name="M2012.11.2">Conversions shall not be performed between a pointer to an incomplete type and any other type.</rule_description>
        <rule_description name="M2012.11.3">A cast shall not be performed between a pointer to object type and a pointer to a different object type.</rule_description>
        <rule_description name="M2012.11.6">A cast shall not be performed between pointer to void and an arithmetic type.</rule_description>
        <rule_description name="M2012.11.7">A cast shall not be performed between pointer to object and a non-integer arithmetic type.</rule_description>
        <rule_description name="M2012.11.8">A cast shall not remove any const or volatile qualification from the type pointed to by a pointer.</rule_description>
        <rule_description name="A.4.1">The result of the evaluation of an expression shall not depend on the order of evaluation of subexpressions. (ISO/IEC 9899:1999 6.5)</rule_description>
        <rule_description name="A.4.2">The result of the evaluation of an initializer list expression shall not depend on the order of evaluation of elements and subexpressions. (ISO/IEC 9899:1999 6.7.8)</rule_description>
    </rule_descriptions>
    <check_descriptions>
        <check_description name="unreachable-code">There shall be no unreachable code.</check_description>
        <check_description name="non-standard-identifier">Identifiers containing characters not provided for by the C standard shall not be used.</check_description>
        <check_description name="inline-static">Inline functions shall be declared static.</check_description>
        <check_description name="distinct-label">Labels inside the same function shall be pairwise distinct.</check_description>
        <check_description name="at-location">Data placement at an absolute address using @ notation shall be avoided.</check_description>
        <check_description name="forward-declared-enum">Enums shall not be forward-declared.</check_description>
        <check_description name="stdlib-limits">Library functions shall not be called with invalid values.</check_description>
        <check_description name="stdlib-use-atoll">The library function &quot;atoll&quot; of the standard header &lt;stdlib.h&gt; shall not be used.</check_description>
        <check_description name="array-parameter-static-size">Array parameter declaration shall not contain the keyword static between the brackets.</check_description>
        <check_description name="identifier-unique-extern">The identifier of an extern object or function shall be unique.</check_description>
        <check_description name="directive-syntax">Preprocessing directvies shall be syntactically correct.</check_description>
        <check_description name="undefined-extern">An identifier with external linkage shall have exactly one external definition.</check_description>
        <check_description name="macro-undefined">All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef, #ifndef and after 'defined'.</check_description>
        <check_description name="cast-pointer-incomplete">Conversions shall not be performed between a pointer to an incomplete type and any other type.</check_description>
        <check_description name="bitfield-typing">Bitfields shall be of signed or unsigned integer type.</check_description>
        <check_description name="initializer-excess">An array initializer shall not exceed the size of the object initialized.</check_description>
        <check_description name="language-override-c99">The names of standard library macros, objects and functions shall not be reused.</check_description>
        <check_description name="wcsftime">The standard library functions abort, exit, getenv and system of the standard header &lt;stdlib.h&gt; shall not be used.</check_description>
        <check_description name="stdlib-macro-getenv">The standard library function getenv of the standard header &lt;stdlib.h&gt; shall not be used. (Not required for Misra C2012 Amendment 1)</check_description>
        <check_description name="include-signal">The standard header &lt;signal.h&gt; shall not be included.</check_description>
        <check_description name="reserved-identifier">Reserved identifiers shall not be defined, redefined or undefined.</check_description>
        <check_description name="dangling-elsegroup">There shall be no #else or #endif directive without associated #if, #ifdef or #ifndef directive in the same file.</check_description>
        <check_description name="stdlib-use-compar">The standard library functions &quot;qsort&quot; and &quot;bsearch&quot; shall not be used.</check_description>
        <check_description name="return-empty">In functions with non-void return type, a return statement shall define a return value.</check_description>
        <check_description name="composite-cast">Composite expressions shall only be casted to narrower type of same category.</check_description>
        <check_description name="inappropriate-enum">Essentially enum values shall not be used in ways forbidden by Misra C:2012 Rule 10.1.</check_description>
        <check_description name="include-characters">Non-standard characters shall not occur in header file names in #include directives.</check_description>
        <check_description name="evaluation-order">The value of an expression and its persistent side effects shall be the same under all evaluation orders.</check_description>
        <check_description name="stdlib-macro-alloc">The standard library functions &quot;malloc&quot;, &quot;calloc&quot;, &quot;realloc&quot; and &quot;free&quot; of the standard header &lt;stdlib.h&gt; shall not be used.</check_description>
        <check_description name="keyword-override">Keywords shall not be redefined.</check_description>
        <check_description name="unsupported-language-feature-fatal">Language features that are not supported by the analyzer shall not be used.</check_description>
        <check_description name="multiple-volatile-accesses">No expression shall read or write more than one volatile object.</check_description>
        <check_description name="floating-point-loop-counter">Loop counter shall not be of floating point type.</check_description>
        <check_description name="statement-expression">GCC's statement expressions shall be avoided.</check_description>
        <check_description name="language-undefine">Identifiers used in the standard library shall not be defined, redefined or undefined.</check_description>
        <check_description name="static-function-declaration">The storage-class specifier static shall be used in all definitions and declarations of functions that have internal linkage.</check_description>
        <check_description name="integer-suffix">A 'U' suffix shall be applied to all integer constants of unsigned type.</check_description>
        <check_description name="include-characters-sline">The character sequence // shall not occur in header file names in #include directives.</check_description>
        <check_description name="stdlib-macro">The standard library functions abort, exit and system of the standard header &lt;stdlib.h&gt; shall not be used.</check_description>
        <check_description name="initializer-multiple">The field of an object shall not be initialized more than once.</check_description>
        <check_description name="stdlib-use-getenv">The standard library function getenv of the standard header &lt;stdlib.h&gt; shall not be used. (Not required for Misra C:2012 Amendment 1)</check_description>
        <check_description name="restrict">The type qualifier 'restrict' shall not be used.</check_description>
        <check_description name="stdlib-macro-ato">The standard library functions &quot;atof&quot;, &quot;atoi&quot; and &quot;atol&quot; of the standard header &lt;stdlib.h&gt; shall not be used.</check_description>
        <check_description name="binary-constant">GCC's binary constants shall be avoided.</check_description>
        <check_description name="error-information-unused">If a function returns error information, this error information shall be tested.</check_description>
        <check_description name="inappropriate-pointer-cast-implicit">No implicit conversion shall be performed between pointer to object and arithmetic essential non-integer type.</check_description>
        <check_description name="parameter-name-match">The identifiers used in the declaration and definition of a function shall be identical.</check_description>
        <check_description name="language-override">The names of standard library macros, objects and functions shall not be reused.</check_description>
        <check_description name="pointer-qualifier-cast-volatile">A cast shall not remove any volatile qualification from the type addressed by a pointer.</check_description>
        <check_description name="controlling-invariant">Controlling expressions shall not be invariant.</check_description>
        <check_description name="stdlib-use-wchar">The standard library functions specified in the C99 standard, 7.24.2-3 shall not be used.</check_description>
        <check_description name="composite-type-width">Composite operands shall not be combined with operands of wider type.</check_description>
        <check_description name="type-compatibility">If objects or functions are declared more than once their types shall be compatible.</check_description>
        <check_description name="boolean-control">The controlling expression of a conditional or iterative statement shall be of essentially Boolean type.</check_description>
        <check_description name="switch-clause-break">An unconditional break statement shall terminate every non-empty switch clause.</check_description>
        <check_description name="pointer-qualifier-cast-volatile-implicit">A conversion shall not remove any volatile qualification from the type addressed by a pointer.</check_description>
        <check_description name="distinct-extern">External identifiers shall be distinct.</check_description>
        <check_description name="reserved-declaration-c99">Identifiers of standard library macros, objects and functions shall not be reused.</check_description>
        <check_description name="include-characters-backslash">The character \ shall not occur in header file names in #include directives.</check_description>
        <check_description name="non-standard-escape-sequence">Non-standard escape sequences shall not be used.</check_description>
        <check_description name="stdlib-macro-stdio">Macros with a name declared in &lt;stdio.h&gt; shall not be expanded.</check_description>
        <check_description name="essential-shift-width">The right-hand operand of a shift operator shall have a value between zero and one less than the width in bits of the essential type of the left-hand operand.</check_description>
        <check_description name="hash-macro-order">A parameter shall not be enclosed by a preceding # and a subsequent ## operator.</check_description>
        <check_description name="invalid-free">free() and realloc() shall be called correctly.</check_description>
        <check_description name="stdlib-use-system">The standard library function system of the standard header &lt;stdlib.h&gt; shall not be used.</check_description>
        <check_description name="pointer-qualifier-cast-const-implicit">A conversion shall not remove any const qualification from the type addressed by a pointer.</check_description>
        <check_description name="controlling-invariant-expression">Controlling expressions shall not be invariant.</check_description>
        <check_description name="pointer-comparison">&gt;, &gt;=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array.</check_description>
        <check_description name="switch-clause-empty-compound">Switch clauses shall not be empty.</check_description>
        <check_description name="smline-comment">The character sequence /* shall not be used within a line comment.</check_description>
        <check_description name="pointer-integral-cast">A cast shall not be performed between a pointer to object type and an integral type.</check_description>
        <check_description name="non-standard-keyword">Non-standard keywords shall not be used.</check_description>
        <check_description name="redeclaration">Entities with no linkage shall not be redeclared in the same scope.</check_description>
        <check_description name="compound-ifelse">The body of an if or else statement shall be a compound statement (or another if statement in case of an else).</check_description>
        <check_description name="parameter-name">Identifiers shall be given for all of the parameters in a function prototype declaration.</check_description>
        <check_description name="reserved-declaration">Identifiers of standard library macros, objects and functions shall not be reused.</check_description>
        <check_description name="essentially-boolean-switch">A switch expression shall not represent a value that is essentially Boolean.</check_description>
        <check_description name="identifier-unique-tag">A tag name shall be a unique identifier.</check_description>
        <check_description name="enum-implicit-value">Implicitly-specified values of enumeration constants shall be unique for this enumeration.</check_description>
        <check_description name="stdlib-macro-atoll">The library function &quot;atoll&quot; of the standard header &lt;stdlib.h&gt; shall not be used.</check_description>
        <check_description name="inappropriate-bool">Essentially Boolean values shall not be used in ways forbidden by Misra C:2012 Rule 10.1.</check_description>
        <check_description name="alignof-void">The _Alignof operator shall not be applied to type void.</check_description>
        <check_description name="include-stdio">The standard header &lt;stdio.h&gt; shall not be included in production code.</check_description>
        <check_description name="external-redeclaration">An external object or function shall be declared only once.</check_description>
        <check_description name="attribute">__attribute__((...)) shall not be used.</check_description>
        <check_description name="switch-clause-count">A switch statement shall contain at least two switch clauses.</check_description>
        <check_description name="inappropriate-pointer-cast">No explicit cast shall be performed between pointer to object and arithmetic essential non-integer type.</check_description>
        <check_description name="mmline-comment">The character sequence /* shall not be used within a /*...*/ comment.</check_description>
        <check_description name="function-return-type">A function definition shall comprise the return type.</check_description>
        <check_description name="include-next">#include_next directives shall be avoided.</check_description>
        <check_description name="ctype-limits">Arguments to the character-handling functions of &lt;ctype.h&gt; shall be representable as unsigned char or equal EOF.</check_description>
        <check_description name="object-pointer-diff-cast-implicit">A conversion shall not be performed between a pointer to object type and a different pointer to object type.</check_description>
        <check_description name="function-prototype">Functions shall have prototype declarations.</check_description>
        <check_description name="type-specifier">Every variable declaration statement shall comprise the data type.</check_description>
        <check_description name="distinct-identifier-hidden">A variable declaration shall never hide a variable of the outer scope.</check_description>
        <check_description name="sizeof">The sizeof operator shall not be used on expressions that contain side effects.</check_description>
        <check_description name="inappropriate-char">Essentially character values shall not be used in ways forbidden by Misra C:2012 Rule 10.1.</check_description>
        <check_description name="invalid-array-size">If the size expression of an array declarator is constant, it shall have a value greater than zero.</check_description>
        <check_description name="missing-else">All if ... else if ... constructs shall be terminated with an else clause.</check_description>
        <check_description name="non-directive">Non-directive preprocessing directives shall be avoided.</check_description>
        <check_description name="include-syntax">The #include directive shall be followed by either a &lt;filename&gt; or &quot;filename&quot; sequence.</check_description>
        <check_description name="unsupported-language-feature">Unsupported language features shall not be used.</check_description>
        <check_description name="lvalue-cast">Lvalue casts shall be avoided.</check_description>
        <check_description name="implicit-function-declaration">Functions shall not be declared implicitly.</check_description>
        <check_description name="multi-character-constant">Character constant containing more then one c-char.</check_description>
        <check_description name="bitfield-signed-size">Bitfields of signed type shall be at least two bits long.</check_description>
        <check_description name="include-time">The standard header &lt;time.h&gt; shall not be included.</check_description>
        <check_description name="unclosed-ifgroup">There shall be no unclosed #if, #ifdef, #ifndef or #else groups.</check_description>
        <check_description name="expression-statement-dead">There shall be no dead code.</check_description>
        <check_description name="return-implicit">In functions with non-void return type, each exit path shall contain a final return statement.</check_description>
        <check_description name="constant-expression-extended">Only stricly conforming constant expressions shall be used</check_description>
        <check_description name="pointer-subtraction">Pointer subtraction shall only be applied to pointers that address elements of the same array.</check_description>
        <check_description name="definition-duplicate">An identifier with external linkage shall have exactly one external definition.</check_description>
        <check_description name="extra-tokens">There shall be no extra tokens at the end of a preprocessor directive.</check_description>
        <check_description name="stdlib-macro-wchar">The standard library functions specified in the C99 standard, 7.24.2-3 shall not be used.</check_description>
        <check_description name="side-effect-in-initializer-list">Initializer lists shall not contain persistent side effects.</check_description>
        <check_description name="function-type-mismatch">For each function declaration and definition the overall function type shall be identical, including qualifiers.</check_description>
        <check_description name="backjump">goto statements shall not jump to a label declared earlier in the function.</check_description>
        <check_description name="composite-assign">Composite expressions shall only be casted to narrower type of same category.</check_description>
        <check_description name="implicit-designation">Braced initializer lists or designators shall be used to initialize fields of subitems.</check_description>
        <check_description name="variable-array-length">Variable array sizes shall not be used.</check_description>
        <check_description name="switch-multiple-default">A switch statement shall have only one default label.</check_description>
        <check_description name="switch-clause-syntax">An unconditional break statement shall terminate every non-empty switch clause.</check_description>
        <check_description name="include-setjmp">The standard header &lt;setjmp.h&gt; shall not be included.</check_description>
        <check_description name="has-include-next">The include file checking macro __has_include_next shall not be used.</check_description>
        <check_description name="octal-constant">Octal constants shall not be used.</check_description>
        <check_description name="compound-switch">The body of a switch statement shall be a compound statement.</check_description>
        <check_description name="function-pointer-integer-cast-implicit">Conversions shall not be performed between a pointer to a function and an integer type.</check_description>
        <check_description name="pointer-attribute">Pointer attributes shall be avoided.</check_description>
        <check_description name="function-return-unused">The return value of a function shall be used.</check_description>
        <check_description name="distinct-macro-parameter">Parameters of a macro shall be pairwise distinct.</check_description>
        <check_description name="switch-default">Each switch statement shall contain a default label.</check_description>
        <check_description name="pointer-qualifier-cast-const">A cast shall not remove any const qualification from the type addressed by a pointer.</check_description>
        <check_description name="extern-function-declaration">A preceding declaration shall be visible when a function with external linkage is defined.</check_description>
        <check_description name="type-compatibility-link">If objects or functions are declared more than once their types shall be compatible.</check_description>
        <check_description name="switch-skipped-code">No statements or declarations shall precede the first clause of a switch statement.</check_description>
        <check_description name="pointered-deallocation">The address of an object with automatic storage shall not be assigned to objects that may persist after the first object has ceased to exist.</check_description>
        <check_description name="side-effect-in-logical-exp">The right hand operand &amp;&amp; or || shall not contain persistent side effects.</check_description>
        <check_description name="for-loop-condition-sideeffect">Controlling expressions shall not contain persistent side effects.</check_description>
        <check_description name="array-initialization">Arrays shall be completely initialized.</check_description>
        <check_description name="object-type-mismatch">If objects are declared more than once their types shall be identical.</check_description>
        <check_description name="pointer-integral-cast-implicit">An Implicit cast shall not be performed between a pointer to object type and an integral type.</check_description>
        <check_description name="array-size-designator">Array sizes shall be given explicit when using designators for initialization.</check_description>
        <check_description name="distinct-identifiers-macros">C identifiers shall be distinct from macro identifiers.</check_description>
        <check_description name="cast-pointer-void-arithmetic-implicit">Conversions shall not be performed between pointer to void and arithmetic type.</check_description>
        <check_description name="literal-assignment">String literals and their address shall be assigned only to objects of pointer to (or array of) const char.</check_description>
        <check_description name="inappropriate-int">Essentially integer values shall not be used in ways forbidden by Misra C:2012 Rule 10.1.</check_description>
        <check_description name="invalid-directive">Directives that do not comply with the constraints are dropped by the frontend.</check_description>
        <check_description name="parameter-match-type">The number of arguments at a function call shall match the number of parameters according to the type of the function designator.</check_description>
        <check_description name="include-tgmath">The standard header &lt;tgmath.h&gt; shall not be included.</check_description>
        <check_description name="assembler">Assembler code shall be avoided.</check_description>
        <check_description name="distinct-macro">The name of a macro shall be distinct from all visible macros and their parameters.</check_description>
        <check_description name="language-undefine-c99">Identifiers used in the standard library shall not be defined, redefined or undefined.</check_description>
        <check_description name="has-include">The include file checking macro __has_include shall not be used.</check_description>
        <check_description name="object-pointer-diff-cast">A cast shall not be performed between a pointer to object type and a different pointer to object type.</check_description>
        <check_description name="identifier-unique-typedef">A typedef name shall be a unique identifier.</check_description>
        <check_description name="external-file-spreading">An external object or function shall be declared in one and only one file.</check_description>
        <check_description name="function-pointer-integer-cast">Conversions shall not be performed between a pointer to a function and an integer type.</check_description>
        <check_description name="stdlib-use-alloc">The standard library functions &quot;malloc&quot;, &quot;calloc&quot;, &quot;realloc&quot; and &quot;free&quot; of the standard header &lt;stdlib.h&gt; shall not be used.</check_description>
        <check_description name="analysis-run">Minimisation of run-time failures shall be ensured.</check_description>
        <check_description name="undeclared-parameter">Every parameter identifier in a function definition with identifier-list shall be declared.</check_description>
        <check_description name="assignment-to-non-modifiable-lvalue">The lvalue to which an assignment is applied to shall be a modifiable lvalue.</check_description>
        <check_description name="if-value">The controlling expression of #if or #elif shall evaluate to only 0 or 1.</check_description>
        <check_description name="goto-nesting">goto statements shall not jump to a label that is declared outside of the blocks enclosing it.</check_description>
        <check_description name="macro-argument-hash">Arguments to a function-like macro shall not contain tokens that look like preprocessing directives.</check_description>
        <check_description name="inappropriate-char-usage">Character values shall not be used in ways forbidden by Misra C:2012 Rule 10.2.</check_description>
        <check_description name="string-literal-modification">String literals shall not be modified by assignment.</check_description>
        <check_description name="compound-loop">The body of a loop shall be a compound statement.</check_description>
        <check_description name="switch-default-position">A default label shall be either first or last switch label in a switch statement.</check_description>
        <check_description name="multiple-include">The contents of a header file shall not be included more then once.</check_description>
        <check_description name="distinct-tags">All tags that are declared in the same scope shall be distinct.</check_description>
        <check_description name="essential-type-assign">Expressions shall not be assigned to objects of narrower essential type or different essential type category.</check_description>
        <check_description name="sizeof-void">The sizeof operator shall not be applied to type void.</check_description>
        <check_description name="include-stdarg">The standard header &lt;stdarg.h&gt; shall not be included.</check_description>
        <check_description name="escape-termination">All octal and hexadecimal escape sequences shall be terminated by either a successive \ or a terminating ' or &quot;.</check_description>
        <check_description name="recursion">Recursive function calls are prohibited.</check_description>
        <check_description name="file-dereference">A pointer to type FILE shall not be dereferenced.</check_description>
        <check_description name="function-pointer-cast">Conversions shall not be performed between a pointer to a function and any type other than an integral type.</check_description>
        <check_description name="stdlib-use-ato">The standard library functions &quot;atof&quot;, &quot;atoi&quot; and &quot;atol&quot; of the standard header &lt;stdlib.h&gt; shall not be used.</check_description>
        <check_description name="excessive-interval">Intervals specified in directives shall not exceed the range of values of the affected type.</check_description>
        <check_description name="parameter-assignment">Function parameters shall not be modified.</check_description>
        <check_description name="cast-pointer-void-arithmetic">Casts shall not be performed between pointer to void and arithmetic type.</check_description>
        <check_description name="evaluation-order-initializer">The values of initializer lists shall not depend on the order of evaluation of its elements and their subexpressions.</check_description>
        <check_description name="static-object-declaration">The storage-class specifier static shall be used in all definitions and declarations of objects that have internal linkage.</check_description>
        <check_description name="switch-label">A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement.</check_description>
        <check_description name="long-suffix">The lowercase character l shall not be used in a literal suffix.</check_description>
        <check_description name="essential-shift-width-constant">The right-hand operand of a shift operator shall have a value between zero and one less than the width in bits of the essential type of the left-hand operand.</check_description>
        <check_description name="distinct-ordinary">Ordinary identifiers shall be distinct.</check_description>
        <check_description name="essential-arithmetic-conversion">Both operands shall be of the same essential type category if the usual arithmetic conversions are performed on them.</check_description>
        <check_description name="sline-splicing">Line continuation shall not be used in // comments.</check_description>
        <check_description name="static-assert">The constant expression of a static assert (_Static_assert) shall compare unequal to zero.</check_description>
        <check_description name="stdlib-macro-compar">The standard library functions &quot;qsort&quot; and &quot;bsearch&quot; shall not be used.</check_description>
        <check_description name="error-information-unused-computed">If a function returns error information, this error information shall be tested.</check_description>
        <check_description name="stdlib-use">The standard library functions abort and exit of the standard header &lt;stdlib.h&gt; shall not be used.</check_description>
        <check_description name="sline-comment">The character sequence // shall not be used within a /*...*/ comment.</check_description>
        <check_description name="extern-object-declaration">A preceding declaration shall be visible when an object with external linkage is defined.</check_description>
        <check_description name="distinct-member">Members of a structure or union shall be pairwise distinct.</check_description>
    </check_descriptions>
    <metric_descriptions>
        <metric_description type="app" name="FILES">Number of files</metric_description>
        <metric_description type="app" name="FUN">Number of function definitions</metric_description>
        <metric_description type="app" name="LINE">Number of source lines</metric_description>
        <metric_description type="app" name="PLINE">Number of physical lines of code</metric_description>
        <metric_description type="app" name="RPATH">Number of recursive paths in the call graph</metric_description>
        <metric_description type="file" name="CDFILE">Comment density</metric_description>
        <metric_description type="file" name="FUN">Number of function definitions</metric_description>
        <metric_description type="file" name="LINE">Number of source lines</metric_description>
        <metric_description type="file" name="PLINE">Number of physical lines of code</metric_description>
        <metric_description type="fun" name="CALLING">Number of functions calling a function</metric_description>
        <metric_description type="fun" name="CALLS">Maximum number of called subfunctions</metric_description>
        <metric_description type="fun" name="CDFUN">Comment density (HIS)</metric_description>
        <metric_description type="fun" name="CYCL">Cyclomatic complexity</metric_description>
        <metric_description type="fun" name="GOTO">Number of goto statements</metric_description>
        <metric_description type="fun" name="LEVEL">Maximum nesting of control structures</metric_description>
        <metric_description type="fun" name="LSCOPE">Language scope</metric_description>
        <metric_description type="fun" name="MLINE">Number of maintainable code lines</metric_description>
        <metric_description type="fun" name="PARAM">Number of parameters</metric_description>
        <metric_description type="fun" name="PATH">Maximum number of execution paths</metric_description>
        <metric_description type="fun" name="RETURN">Number of return statements</metric_description>
        <metric_description type="fun" name="STMT">Number of instructions</metric_description>
    </metric_descriptions>
</a3c>
